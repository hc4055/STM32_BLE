
STM32F103_DHT11_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003580  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800368c  0800368c  0000468c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f4  080036f4  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080036f4  080036f4  000046f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036fc  080036fc  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036fc  080036fc  000046fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003700  08003700  00004700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003704  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000005c  08003760  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003760  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c35e  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0d  00000000  00000000  000113e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  000131f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000978  00000000  00000000  00013e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c0e  00000000  00000000  00014780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e18d  00000000  00000000  0002c38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a55d  00000000  00000000  0003a51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4a78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003774  00000000  00000000  000c4abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c8230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003674 	.word	0x08003674

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003674 	.word	0x08003674

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	68ba      	ldr	r2, [r7, #8]
 800016e:	609a      	str	r2, [r3, #8]
	dht->port = port;
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	687a      	ldr	r2, [r7, #4]
 8000174:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	887a      	ldrh	r2, [r7, #2]
 800017a:	809a      	strh	r2, [r3, #4]
}
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr

08000186 <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 8000186:	b580      	push	{r7, lr}
 8000188:	b086      	sub	sp, #24
 800018a:	af00      	add	r7, sp, #0
 800018c:	6078      	str	r0, [r7, #4]
 800018e:	460b      	mov	r3, r1
 8000190:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000192:	f107 0308 	add.w	r3, r7, #8
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]

	if(pMode == OUTPUT)
 80001a0:	78fb      	ldrb	r3, [r7, #3]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d111      	bne.n	80001ca <set_dht11_gpio_mode+0x44>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	889b      	ldrh	r3, [r3, #4]
 80001aa:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ac:	2301      	movs	r3, #1
 80001ae:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b0:	2300      	movs	r3, #0
 80001b2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001b4:	2303      	movs	r3, #3
 80001b6:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	f107 0208 	add.w	r2, r7, #8
 80001c0:	4611      	mov	r1, r2
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 fee2 	bl	8000f8c <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 80001c8:	e013      	b.n	80001f2 <set_dht11_gpio_mode+0x6c>
	}else if(pMode == INPUT)
 80001ca:	78fb      	ldrb	r3, [r7, #3]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d110      	bne.n	80001f2 <set_dht11_gpio_mode+0x6c>
	  GPIO_InitStruct.Pin = dht->pin;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	889b      	ldrh	r3, [r3, #4]
 80001d4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001da:	2300      	movs	r3, #0
 80001dc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001de:	2303      	movs	r3, #3
 80001e0:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f107 0208 	add.w	r2, r7, #8
 80001ea:	4611      	mov	r1, r2
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 fecd 	bl	8000f8c <HAL_GPIO_Init>
}
 80001f2:	bf00      	nop
 80001f4:	3718      	adds	r7, #24
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}

080001fa <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 80001fa:	b580      	push	{r7, lr}
 80001fc:	b094      	sub	sp, #80	@ 0x50
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000206:	2300      	movs	r3, #0
 8000208:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800020a:	2300      	movs	r3, #0
 800020c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 8000210:	2300      	movs	r3, #0
 8000212:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000216:	2300      	movs	r3, #0
 8000218:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 800021c:	2300      	movs	r3, #0
 800021e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8000222:	2300      	movs	r3, #0
 8000224:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 8000228:	2101      	movs	r1, #1
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f7ff ffab 	bl	8000186 <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	6818      	ldr	r0, [r3, #0]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	889b      	ldrh	r3, [r3, #4]
 8000238:	2200      	movs	r2, #0
 800023a:	4619      	mov	r1, r3
 800023c:	f001 f841 	bl	80012c2 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 8000240:	2012      	movs	r0, #18
 8000242:	f000 fcbf 	bl	8000bc4 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000246:	b672      	cpsid	i
}
 8000248:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fcb0 	bl	8001bb4 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 8000254:	2100      	movs	r1, #0
 8000256:	6878      	ldr	r0, [r7, #4]
 8000258:	f7ff ff95 	bl	8000186 <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2200      	movs	r2, #0
 8000264:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000266:	e00b      	b.n	8000280 <readDHT11+0x86>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000270:	b29b      	uxth	r3, r3
 8000272:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000276:	d903      	bls.n	8000280 <readDHT11+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
 8000278:	b662      	cpsie	i
}
 800027a:	bf00      	nop
			__enable_irq();
			return 0;
 800027c:	2300      	movs	r3, #0
 800027e:	e130      	b.n	80004e2 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	889b      	ldrh	r3, [r3, #4]
 8000288:	4619      	mov	r1, r3
 800028a:	4610      	mov	r0, r2
 800028c:	f001 f802 	bl	8001294 <HAL_GPIO_ReadPin>
 8000290:	4603      	mov	r3, r0
 8000292:	2b01      	cmp	r3, #1
 8000294:	d0e8      	beq.n	8000268 <readDHT11+0x6e>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	689b      	ldr	r3, [r3, #8]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80002a0:	e00b      	b.n	80002ba <readDHT11+0xc0>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80002b0:	d903      	bls.n	80002ba <readDHT11+0xc0>
  __ASM volatile ("cpsie i" : : : "memory");
 80002b2:	b662      	cpsie	i
}
 80002b4:	bf00      	nop
			__enable_irq();
			return 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	e113      	b.n	80004e2 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	889b      	ldrh	r3, [r3, #4]
 80002c2:	4619      	mov	r1, r3
 80002c4:	4610      	mov	r0, r2
 80002c6:	f000 ffe5 	bl	8001294 <HAL_GPIO_ReadPin>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0e8      	beq.n	80002a2 <readDHT11+0xa8>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2200      	movs	r2, #0
 80002e2:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80002e4:	e00b      	b.n	80002fe <readDHT11+0x104>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80002f4:	d903      	bls.n	80002fe <readDHT11+0x104>
  __ASM volatile ("cpsie i" : : : "memory");
 80002f6:	b662      	cpsie	i
}
 80002f8:	bf00      	nop
			__enable_irq();
			return 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	e0f1      	b.n	80004e2 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	889b      	ldrh	r3, [r3, #4]
 8000306:	4619      	mov	r1, r3
 8000308:	4610      	mov	r0, r2
 800030a:	f000 ffc3 	bl	8001294 <HAL_GPIO_ReadPin>
 800030e:	4603      	mov	r3, r0
 8000310:	2b01      	cmp	r3, #1
 8000312:	d0e8      	beq.n	80002e6 <readDHT11+0xec>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800031c:	86bb      	strh	r3, [r7, #52]	@ 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 800031e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000320:	2b4a      	cmp	r3, #74	@ 0x4a
 8000322:	d80c      	bhi.n	800033e <readDHT11+0x144>
 8000324:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000326:	2b55      	cmp	r3, #85	@ 0x55
 8000328:	d909      	bls.n	800033e <readDHT11+0x144>
 800032a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800032c:	2b4a      	cmp	r3, #74	@ 0x4a
 800032e:	d806      	bhi.n	800033e <readDHT11+0x144>
 8000330:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000332:	2b55      	cmp	r3, #85	@ 0x55
 8000334:	d903      	bls.n	800033e <readDHT11+0x144>
  __ASM volatile ("cpsie i" : : : "memory");
 8000336:	b662      	cpsie	i
}
 8000338:	bf00      	nop
	{
		__enable_irq();
		return 0;
 800033a:	2300      	movs	r3, #0
 800033c:	e0d1      	b.n	80004e2 <readDHT11+0x2e8>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 800033e:	2300      	movs	r3, #0
 8000340:	647b      	str	r3, [r7, #68]	@ 0x44
 8000342:	e05d      	b.n	8000400 <readDHT11+0x206>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2200      	movs	r2, #0
 800034c:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800034e:	e00b      	b.n	8000368 <readDHT11+0x16e>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000358:	b29b      	uxth	r3, r3
 800035a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800035e:	d903      	bls.n	8000368 <readDHT11+0x16e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000360:	b662      	cpsie	i
}
 8000362:	bf00      	nop
				__enable_irq();
				return 0;
 8000364:	2300      	movs	r3, #0
 8000366:	e0bc      	b.n	80004e2 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	889b      	ldrh	r3, [r3, #4]
 8000370:	4619      	mov	r1, r3
 8000372:	4610      	mov	r0, r2
 8000374:	f000 ff8e 	bl	8001294 <HAL_GPIO_ReadPin>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0e8      	beq.n	8000350 <readDHT11+0x156>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2200      	movs	r2, #0
 8000386:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000388:	e00b      	b.n	80003a2 <readDHT11+0x1a8>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000392:	b29b      	uxth	r3, r3
 8000394:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000398:	d903      	bls.n	80003a2 <readDHT11+0x1a8>
  __ASM volatile ("cpsie i" : : : "memory");
 800039a:	b662      	cpsie	i
}
 800039c:	bf00      	nop
				__enable_irq();
				return 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	e09f      	b.n	80004e2 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	889b      	ldrh	r3, [r3, #4]
 80003aa:	4619      	mov	r1, r3
 80003ac:	4610      	mov	r0, r2
 80003ae:	f000 ff71 	bl	8001294 <HAL_GPIO_ReadPin>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d0e8      	beq.n	800038a <readDHT11+0x190>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003c0:	86fb      	strh	r3, [r7, #54]	@ 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 80003c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80003c4:	2b14      	cmp	r3, #20
 80003c6:	d906      	bls.n	80003d6 <readDHT11+0x1dc>
 80003c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80003ca:	2b1d      	cmp	r3, #29
 80003cc:	d803      	bhi.n	80003d6 <readDHT11+0x1dc>
		{
			mBit = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80003d4:	e008      	b.n	80003e8 <readDHT11+0x1ee>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 80003d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80003d8:	2b3c      	cmp	r3, #60	@ 0x3c
 80003da:	d905      	bls.n	80003e8 <readDHT11+0x1ee>
 80003dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80003de:	2b4f      	cmp	r3, #79	@ 0x4f
 80003e0:	d802      	bhi.n	80003e8 <readDHT11+0x1ee>
		{
			 mBit = 1;
 80003e2:	2301      	movs	r3, #1
 80003e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 80003e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80003ec:	b2d9      	uxtb	r1, r3
 80003ee:	f107 0208 	add.w	r2, r7, #8
 80003f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003f4:	4413      	add	r3, r2
 80003f6:	460a      	mov	r2, r1
 80003f8:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 80003fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003fc:	3301      	adds	r3, #1
 80003fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8000400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000402:	2b27      	cmp	r3, #39	@ 0x27
 8000404:	dd9e      	ble.n	8000344 <readDHT11+0x14a>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	4618      	mov	r0, r3
 800040c:	f001 fc1c 	bl	8001c48 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 8000410:	b662      	cpsie	i
}
 8000412:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 8000414:	2300      	movs	r3, #0
 8000416:	643b      	str	r3, [r7, #64]	@ 0x40
 8000418:	e011      	b.n	800043e <readDHT11+0x244>
	{
		humVal += mData[i];
 800041a:	f107 0208 	add.w	r2, r7, #8
 800041e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000420:	4413      	add	r3, r2
 8000422:	781a      	ldrb	r2, [r3, #0]
 8000424:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000428:	4413      	add	r3, r2
 800042a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
		humVal = humVal << 1;
 800042e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	for(int i = 0; i < 8; i++)
 8000438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800043a:	3301      	adds	r3, #1
 800043c:	643b      	str	r3, [r7, #64]	@ 0x40
 800043e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000440:	2b07      	cmp	r3, #7
 8000442:	ddea      	ble.n	800041a <readDHT11+0x220>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 8000444:	2310      	movs	r3, #16
 8000446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000448:	e011      	b.n	800046e <readDHT11+0x274>
	{
		tempVal += mData[i];
 800044a:	f107 0208 	add.w	r2, r7, #8
 800044e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000450:	4413      	add	r3, r2
 8000452:	781a      	ldrb	r2, [r3, #0]
 8000454:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000458:	4413      	add	r3, r2
 800045a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		tempVal = tempVal << 1;
 800045e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	for(int i = 16; i < 24; i++)
 8000468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800046a:	3301      	adds	r3, #1
 800046c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800046e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000470:	2b17      	cmp	r3, #23
 8000472:	ddea      	ble.n	800044a <readDHT11+0x250>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 8000474:	2320      	movs	r3, #32
 8000476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000478:	e011      	b.n	800049e <readDHT11+0x2a4>
	{
		parityVal += mData[i];
 800047a:	f107 0208 	add.w	r2, r7, #8
 800047e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000480:	4413      	add	r3, r2
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000488:	4413      	add	r3, r2
 800048a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
		parityVal = parityVal << 1;
 800048e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	for(int i = 32; i < 40; i++)
 8000498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800049a:	3301      	adds	r3, #1
 800049c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800049e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80004a0:	2b27      	cmp	r3, #39	@ 0x27
 80004a2:	ddea      	ble.n	800047a <readDHT11+0x280>
	}

	parityVal = parityVal >> 1;
 80004a4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80004a8:	085b      	lsrs	r3, r3, #1
 80004aa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	humVal = humVal >> 1;
 80004ae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80004b2:	085b      	lsrs	r3, r3, #1
 80004b4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	tempVal = tempVal >> 1;
 80004b8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80004bc:	085b      	lsrs	r3, r3, #1
 80004be:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	genParity = humVal + tempVal;
 80004c2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80004c6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80004ca:	4413      	add	r3, r2
 80004cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 80004d6:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80004de:	735a      	strb	r2, [r3, #13]


	return 1;
 80004e0:	2301      	movs	r3, #1
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3750      	adds	r7, #80	@ 0x50
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fb06 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f898 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f954 	bl	80007a4 <MX_GPIO_Init>
  MX_TIM4_Init();
 80004fc:	f000 f8da 	bl	80006b4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000500:	f000 f926 	bl	8000750 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init_dht11(&dht11_sensor, &htim4, GPIOB, GPIO_PIN_4);
 8000504:	2310      	movs	r3, #16
 8000506:	4a3e      	ldr	r2, [pc, #248]	@ (8000600 <main+0x114>)
 8000508:	493e      	ldr	r1, [pc, #248]	@ (8000604 <main+0x118>)
 800050a:	483f      	ldr	r0, [pc, #252]	@ (8000608 <main+0x11c>)
 800050c:	f7ff fe26 	bl	800015c <init_dht11>
  HAL_TIM_Base_Start(&htim4);
 8000510:	483c      	ldr	r0, [pc, #240]	@ (8000604 <main+0x118>)
 8000512:	f001 fb4f 	bl	8001bb4 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_ONBOARD_GPIO_Port, LED_ONBOARD_Pin, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051c:	483b      	ldr	r0, [pc, #236]	@ (800060c <main+0x120>)
 800051e:	f000 fed0 	bl	80012c2 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000522:	2064      	movs	r0, #100	@ 0x64
 8000524:	f000 fb4e 	bl	8000bc4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_ONBOARD_GPIO_Port, LED_ONBOARD_Pin, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800052e:	4837      	ldr	r0, [pc, #220]	@ (800060c <main+0x120>)
 8000530:	f000 fec7 	bl	80012c2 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000534:	2064      	movs	r0, #100	@ 0x64
 8000536:	f000 fb45 	bl	8000bc4 <HAL_Delay>
	  // ReaD DHT11
	  if (readDHT11(&dht11_sensor)) {
 800053a:	4833      	ldr	r0, [pc, #204]	@ (8000608 <main+0x11c>)
 800053c:	f7ff fe5d 	bl	80001fa <readDHT11>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d02f      	beq.n	80005a6 <main+0xba>
		// Lưu giá trị nhiệt độ vào biến global
		temperature = dht11_sensor.temperature;
 8000546:	4b30      	ldr	r3, [pc, #192]	@ (8000608 <main+0x11c>)
 8000548:	7b1a      	ldrb	r2, [r3, #12]
 800054a:	4b31      	ldr	r3, [pc, #196]	@ (8000610 <main+0x124>)
 800054c:	701a      	strb	r2, [r3, #0]
		humidty = dht11_sensor.humidty;
 800054e:	4b2e      	ldr	r3, [pc, #184]	@ (8000608 <main+0x11c>)
 8000550:	7b5a      	ldrb	r2, [r3, #13]
 8000552:	4b30      	ldr	r3, [pc, #192]	@ (8000614 <main+0x128>)
 8000554:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_ONBOARD_GPIO_Port, LED_ONBOARD_Pin, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800055c:	482b      	ldr	r0, [pc, #172]	@ (800060c <main+0x120>)
 800055e:	f000 feb0 	bl	80012c2 <HAL_GPIO_WritePin>
	    HAL_Delay(1000);
 8000562:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000566:	f000 fb2d 	bl	8000bc4 <HAL_Delay>
	    HAL_GPIO_WritePin(LED_ONBOARD_GPIO_Port, LED_ONBOARD_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000570:	4826      	ldr	r0, [pc, #152]	@ (800060c <main+0x120>)
 8000572:	f000 fea6 	bl	80012c2 <HAL_GPIO_WritePin>
	    HAL_Delay(1000);
 8000576:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800057a:	f000 fb23 	bl	8000bc4 <HAL_Delay>
	    data = temperature*100+humidty;
 800057e:	4b24      	ldr	r3, [pc, #144]	@ (8000610 <main+0x124>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	461a      	mov	r2, r3
 8000586:	0092      	lsls	r2, r2, #2
 8000588:	4413      	add	r3, r2
 800058a:	461a      	mov	r2, r3
 800058c:	0091      	lsls	r1, r2, #2
 800058e:	461a      	mov	r2, r3
 8000590:	460b      	mov	r3, r1
 8000592:	4413      	add	r3, r2
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	b29b      	uxth	r3, r3
 8000598:	4a1e      	ldr	r2, [pc, #120]	@ (8000614 <main+0x128>)
 800059a:	7812      	ldrb	r2, [r2, #0]
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	4413      	add	r3, r2
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000618 <main+0x12c>)
 80005a4:	801a      	strh	r2, [r3, #0]

	  }

	  HAL_GPIO_WritePin(LED_ONBOARD_GPIO_Port, LED_ONBOARD_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ac:	4817      	ldr	r0, [pc, #92]	@ (800060c <main+0x120>)
 80005ae:	f000 fe88 	bl	80012c2 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80005b2:	2064      	movs	r0, #100	@ 0x64
 80005b4:	f000 fb06 	bl	8000bc4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_ONBOARD_GPIO_Port, LED_ONBOARD_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005be:	4813      	ldr	r0, [pc, #76]	@ (800060c <main+0x120>)
 80005c0:	f000 fe7f 	bl	80012c2 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80005c4:	2064      	movs	r0, #100	@ 0x64
 80005c6:	f000 fafd 	bl	8000bc4 <HAL_Delay>
	  HAL_Delay(1000);
 80005ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ce:	f000 faf9 	bl	8000bc4 <HAL_Delay>

	  // Định dạng dữ liệu dưới dạng chuỗi
	  sprintf(uartBuffer, "%d\r\n", data);
 80005d2:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <main+0x12c>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	4910      	ldr	r1, [pc, #64]	@ (800061c <main+0x130>)
 80005dc:	4810      	ldr	r0, [pc, #64]	@ (8000620 <main+0x134>)
 80005de:	f002 fb99 	bl	8002d14 <siprintf>
  //	  sprintf(uartBuffer, "Temp: 100 C\r\n");

	  // Gửi dữ liệu qua USART1
	  HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), 100);
 80005e2:	480f      	ldr	r0, [pc, #60]	@ (8000620 <main+0x134>)
 80005e4:	f7ff fdb2 	bl	800014c <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	2364      	movs	r3, #100	@ 0x64
 80005ee:	490c      	ldr	r1, [pc, #48]	@ (8000620 <main+0x134>)
 80005f0:	480c      	ldr	r0, [pc, #48]	@ (8000624 <main+0x138>)
 80005f2:	f001 fdc9 	bl	8002188 <HAL_UART_Transmit>

	  // Đợi 1 giây rồi gửi tiếp
	  HAL_Delay(500);
 80005f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005fa:	f000 fae3 	bl	8000bc4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_ONBOARD_GPIO_Port, LED_ONBOARD_Pin, GPIO_PIN_SET);
 80005fe:	e78a      	b.n	8000516 <main+0x2a>
 8000600:	40010c00 	.word	0x40010c00
 8000604:	20000078 	.word	0x20000078
 8000608:	2000010c 	.word	0x2000010c
 800060c:	40011000 	.word	0x40011000
 8000610:	20000108 	.word	0x20000108
 8000614:	20000109 	.word	0x20000109
 8000618:	2000010a 	.word	0x2000010a
 800061c:	0800368c 	.word	0x0800368c
 8000620:	2000011c 	.word	0x2000011c
 8000624:	200000c0 	.word	0x200000c0

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b090      	sub	sp, #64	@ 0x40
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	2228      	movs	r2, #40	@ 0x28
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fb8c 	bl	8002d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064a:	2301      	movs	r3, #1
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000652:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000660:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000664:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000666:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800066a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0318 	add.w	r3, r7, #24
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fe3f 	bl	80012f4 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800067c:	f000 f8fe 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f8ac 	bl	80017f8 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006a6:	f000 f8e9 	bl	800087c <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3740      	adds	r7, #64	@ 0x40
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <MX_TIM4_Init+0x94>)
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <MX_TIM4_Init+0x98>)
 80006d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <MX_TIM4_Init+0x94>)
 80006d8:	2247      	movs	r2, #71	@ 0x47
 80006da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000748 <MX_TIM4_Init+0x94>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80006e2:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <MX_TIM4_Init+0x94>)
 80006e4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80006e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ea:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <MX_TIM4_Init+0x94>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <MX_TIM4_Init+0x94>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80006f6:	4814      	ldr	r0, [pc, #80]	@ (8000748 <MX_TIM4_Init+0x94>)
 80006f8:	f001 fa0c 	bl	8001b14 <HAL_TIM_Base_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000702:	f000 f8bb 	bl	800087c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	4619      	mov	r1, r3
 8000712:	480d      	ldr	r0, [pc, #52]	@ (8000748 <MX_TIM4_Init+0x94>)
 8000714:	f001 fabe 	bl	8001c94 <HAL_TIM_ConfigClockSource>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800071e:	f000 f8ad 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800072a:	463b      	mov	r3, r7
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	@ (8000748 <MX_TIM4_Init+0x94>)
 8000730:	f001 fc7c 	bl	800202c <HAL_TIMEx_MasterConfigSynchronization>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800073a:	f000 f89f 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000078 	.word	0x20000078
 800074c:	40000800 	.word	0x40000800

08000750 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 8000756:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <MX_USART1_UART_Init+0x50>)
 8000758:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 800075c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000760:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_USART1_UART_Init+0x4c>)
 8000788:	f001 fcae 	bl	80020e8 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000792:	f000 f873 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000c0 	.word	0x200000c0
 80007a0:	40013800 	.word	0x40013800

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000870 <MX_GPIO_Init+0xcc>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a2c      	ldr	r2, [pc, #176]	@ (8000870 <MX_GPIO_Init+0xcc>)
 80007be:	f043 0310 	orr.w	r3, r3, #16
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000870 <MX_GPIO_Init+0xcc>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0310 	and.w	r3, r3, #16
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d0:	4b27      	ldr	r3, [pc, #156]	@ (8000870 <MX_GPIO_Init+0xcc>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a26      	ldr	r2, [pc, #152]	@ (8000870 <MX_GPIO_Init+0xcc>)
 80007d6:	f043 0320 	orr.w	r3, r3, #32
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b24      	ldr	r3, [pc, #144]	@ (8000870 <MX_GPIO_Init+0xcc>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0320 	and.w	r3, r3, #32
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <MX_GPIO_Init+0xcc>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a20      	ldr	r2, [pc, #128]	@ (8000870 <MX_GPIO_Init+0xcc>)
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <MX_GPIO_Init+0xcc>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_GPIO_Init+0xcc>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a1a      	ldr	r2, [pc, #104]	@ (8000870 <MX_GPIO_Init+0xcc>)
 8000806:	f043 0308 	orr.w	r3, r3, #8
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_GPIO_Init+0xcc>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0308 	and.w	r3, r3, #8
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ONBOARD_GPIO_Port, LED_ONBOARD_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081e:	4815      	ldr	r0, [pc, #84]	@ (8000874 <MX_GPIO_Init+0xd0>)
 8000820:	f000 fd4f 	bl	80012c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2110      	movs	r1, #16
 8000828:	4813      	ldr	r0, [pc, #76]	@ (8000878 <MX_GPIO_Init+0xd4>)
 800082a:	f000 fd4a 	bl	80012c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_ONBOARD_Pin */
  GPIO_InitStruct.Pin = LED_ONBOARD_Pin;
 800082e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2302      	movs	r3, #2
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_ONBOARD_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	480b      	ldr	r0, [pc, #44]	@ (8000874 <MX_GPIO_Init+0xd0>)
 8000848:	f000 fba0 	bl	8000f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800084c:	2310      	movs	r3, #16
 800084e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000850:	2311      	movs	r3, #17
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2302      	movs	r3, #2
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_GPIO_Init+0xd4>)
 8000864:	f000 fb92 	bl	8000f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40021000 	.word	0x40021000
 8000874:	40011000 	.word	0x40011000
 8000878:	40010c00 	.word	0x40010c00

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <Error_Handler+0x8>

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <HAL_MspInit+0x5c>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	4a14      	ldr	r2, [pc, #80]	@ (80008e4 <HAL_MspInit+0x5c>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6193      	str	r3, [r2, #24]
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_MspInit+0x5c>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <HAL_MspInit+0x5c>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4a0e      	ldr	r2, [pc, #56]	@ (80008e4 <HAL_MspInit+0x5c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b0:	61d3      	str	r3, [r2, #28]
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <HAL_MspInit+0x5c>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008be:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <HAL_MspInit+0x60>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <HAL_MspInit+0x60>)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010000 	.word	0x40010000

080008ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a09      	ldr	r2, [pc, #36]	@ (8000920 <HAL_TIM_Base_MspInit+0x34>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d10b      	bne.n	8000916 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_TIM_Base_MspInit+0x38>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_TIM_Base_MspInit+0x38>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_TIM_Base_MspInit+0x38>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	40000800 	.word	0x40000800
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a20      	ldr	r2, [pc, #128]	@ (80009c4 <HAL_UART_MspInit+0x9c>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d139      	bne.n	80009bc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000948:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <HAL_UART_MspInit+0xa0>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a1e      	ldr	r2, [pc, #120]	@ (80009c8 <HAL_UART_MspInit+0xa0>)
 800094e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <HAL_UART_MspInit+0xa0>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <HAL_UART_MspInit+0xa0>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a18      	ldr	r2, [pc, #96]	@ (80009c8 <HAL_UART_MspInit+0xa0>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <HAL_UART_MspInit+0xa0>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000978:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800097c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	4619      	mov	r1, r3
 800098c:	480f      	ldr	r0, [pc, #60]	@ (80009cc <HAL_UART_MspInit+0xa4>)
 800098e:	f000 fafd 	bl	8000f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	4619      	mov	r1, r3
 80009a6:	4809      	ldr	r0, [pc, #36]	@ (80009cc <HAL_UART_MspInit+0xa4>)
 80009a8:	f000 faf0 	bl	8000f8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	2025      	movs	r0, #37	@ 0x25
 80009b2:	f000 fa02 	bl	8000dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009b6:	2025      	movs	r0, #37	@ 0x25
 80009b8:	f000 fa1b 	bl	8000df2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009bc:	bf00      	nop
 80009be:	3720      	adds	r7, #32
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40013800 	.word	0x40013800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010800 	.word	0x40010800

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <NMI_Handler+0x4>

080009d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <MemManage_Handler+0x4>

080009e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a20:	f000 f8b4 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <USART1_IRQHandler+0x10>)
 8000a2e:	f001 fc37 	bl	80022a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000c0 	.word	0x200000c0

08000a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a44:	4a14      	ldr	r2, [pc, #80]	@ (8000a98 <_sbrk+0x5c>)
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <_sbrk+0x60>)
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a50:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a58:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <_sbrk+0x64>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	@ (8000aa4 <_sbrk+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5e:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d207      	bcs.n	8000a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a6c:	f002 f97a 	bl	8002d64 <__errno>
 8000a70:	4603      	mov	r3, r0
 8000a72:	220c      	movs	r2, #12
 8000a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	e009      	b.n	8000a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a82:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <_sbrk+0x64>)
 8000a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3718      	adds	r7, #24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20005000 	.word	0x20005000
 8000a9c:	00000400 	.word	0x00000400
 8000aa0:	20000130 	.word	0x20000130
 8000aa4:	20000280 	.word	0x20000280

08000aa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab4:	f7ff fff8 	bl	8000aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aba:	490c      	ldr	r1, [pc, #48]	@ (8000aec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000abc:	4a0c      	ldr	r2, [pc, #48]	@ (8000af0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a09      	ldr	r2, [pc, #36]	@ (8000af4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ad0:	4c09      	ldr	r4, [pc, #36]	@ (8000af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ade:	f002 f947 	bl	8002d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ae2:	f7ff fd03 	bl	80004ec <main>
  bx lr
 8000ae6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000af0:	08003704 	.word	0x08003704
  ldr r2, =_sbss
 8000af4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000af8:	20000280 	.word	0x20000280

08000afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_2_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <HAL_Init+0x28>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	@ (8000b28 <HAL_Init+0x28>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f947 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff feb4 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f95f 	bl	8000e0e <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 f927 	bl	8000dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	@ (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b05      	ldr	r3, [pc, #20]	@ (8000ba8 <HAL_IncTick+0x1c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <HAL_IncTick+0x20>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a03      	ldr	r2, [pc, #12]	@ (8000bac <HAL_IncTick+0x20>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000134 	.word	0x20000134

08000bb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b02      	ldr	r3, [pc, #8]	@ (8000bc0 <HAL_GetTick+0x10>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	20000134 	.word	0x20000134

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff fff0 	bl	8000bb0 <HAL_GetTick>
 8000bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bea:	bf00      	nop
 8000bec:	f7ff ffe0 	bl	8000bb0 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4906      	ldr	r1, [pc, #24]	@ (8000ca4 <__NVIC_EnableIRQ+0x34>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	@ (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	@ (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	@ 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	@ 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d70:	d301      	bcc.n	8000d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00f      	b.n	8000d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d76:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <SysTick_Config+0x40>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f7ff ff90 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <SysTick_Config+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8e:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <SysTick_Config+0x40>)
 8000d90:	2207      	movs	r2, #7
 8000d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff2d 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dcc:	f7ff ff42 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	6978      	ldr	r0, [r7, #20]
 8000dd8:	f7ff ff90 	bl	8000cfc <NVIC_EncodePriority>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff5f 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff35 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ffa2 	bl	8000d60 <SysTick_Config>
 8000e1c:	4603      	mov	r3, r0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b085      	sub	sp, #20
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d008      	beq.n	8000e50 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2204      	movs	r2, #4
 8000e42:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e020      	b.n	8000e92 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 020e 	bic.w	r2, r2, #14
 8000e5e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0201 	bic.w	r2, r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e78:	2101      	movs	r1, #1
 8000e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d005      	beq.n	8000ec0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e051      	b.n	8000f64 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 020e 	bic.w	r2, r2, #14
 8000ece:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0201 	bic.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a22      	ldr	r2, [pc, #136]	@ (8000f70 <HAL_DMA_Abort_IT+0xd4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d029      	beq.n	8000f3e <HAL_DMA_Abort_IT+0xa2>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a21      	ldr	r2, [pc, #132]	@ (8000f74 <HAL_DMA_Abort_IT+0xd8>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d022      	beq.n	8000f3a <HAL_DMA_Abort_IT+0x9e>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f78 <HAL_DMA_Abort_IT+0xdc>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d01a      	beq.n	8000f34 <HAL_DMA_Abort_IT+0x98>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1e      	ldr	r2, [pc, #120]	@ (8000f7c <HAL_DMA_Abort_IT+0xe0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d012      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x92>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000f80 <HAL_DMA_Abort_IT+0xe4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d00a      	beq.n	8000f28 <HAL_DMA_Abort_IT+0x8c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1b      	ldr	r2, [pc, #108]	@ (8000f84 <HAL_DMA_Abort_IT+0xe8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d102      	bne.n	8000f22 <HAL_DMA_Abort_IT+0x86>
 8000f1c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f20:	e00e      	b.n	8000f40 <HAL_DMA_Abort_IT+0xa4>
 8000f22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f26:	e00b      	b.n	8000f40 <HAL_DMA_Abort_IT+0xa4>
 8000f28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f2c:	e008      	b.n	8000f40 <HAL_DMA_Abort_IT+0xa4>
 8000f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f32:	e005      	b.n	8000f40 <HAL_DMA_Abort_IT+0xa4>
 8000f34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f38:	e002      	b.n	8000f40 <HAL_DMA_Abort_IT+0xa4>
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	e000      	b.n	8000f40 <HAL_DMA_Abort_IT+0xa4>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	4a11      	ldr	r2, [pc, #68]	@ (8000f88 <HAL_DMA_Abort_IT+0xec>)
 8000f42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	4798      	blx	r3
    } 
  }
  return status;
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40020008 	.word	0x40020008
 8000f74:	4002001c 	.word	0x4002001c
 8000f78:	40020030 	.word	0x40020030
 8000f7c:	40020044 	.word	0x40020044
 8000f80:	40020058 	.word	0x40020058
 8000f84:	4002006c 	.word	0x4002006c
 8000f88:	40020000 	.word	0x40020000

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b08b      	sub	sp, #44	@ 0x2c
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9e:	e169      	b.n	8001274 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f040 8158 	bne.w	800126e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	4a9a      	ldr	r2, [pc, #616]	@ (800122c <HAL_GPIO_Init+0x2a0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d05e      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fc8:	4a98      	ldr	r2, [pc, #608]	@ (800122c <HAL_GPIO_Init+0x2a0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d875      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fce:	4a98      	ldr	r2, [pc, #608]	@ (8001230 <HAL_GPIO_Init+0x2a4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d058      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fd4:	4a96      	ldr	r2, [pc, #600]	@ (8001230 <HAL_GPIO_Init+0x2a4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d86f      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fda:	4a96      	ldr	r2, [pc, #600]	@ (8001234 <HAL_GPIO_Init+0x2a8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d052      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fe0:	4a94      	ldr	r2, [pc, #592]	@ (8001234 <HAL_GPIO_Init+0x2a8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d869      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000fe6:	4a94      	ldr	r2, [pc, #592]	@ (8001238 <HAL_GPIO_Init+0x2ac>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d04c      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000fec:	4a92      	ldr	r2, [pc, #584]	@ (8001238 <HAL_GPIO_Init+0x2ac>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d863      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000ff2:	4a92      	ldr	r2, [pc, #584]	@ (800123c <HAL_GPIO_Init+0x2b0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d046      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
 8000ff8:	4a90      	ldr	r2, [pc, #576]	@ (800123c <HAL_GPIO_Init+0x2b0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d85d      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8000ffe:	2b12      	cmp	r3, #18
 8001000:	d82a      	bhi.n	8001058 <HAL_GPIO_Init+0xcc>
 8001002:	2b12      	cmp	r3, #18
 8001004:	d859      	bhi.n	80010ba <HAL_GPIO_Init+0x12e>
 8001006:	a201      	add	r2, pc, #4	@ (adr r2, 800100c <HAL_GPIO_Init+0x80>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	08001087 	.word	0x08001087
 8001010:	08001061 	.word	0x08001061
 8001014:	08001073 	.word	0x08001073
 8001018:	080010b5 	.word	0x080010b5
 800101c:	080010bb 	.word	0x080010bb
 8001020:	080010bb 	.word	0x080010bb
 8001024:	080010bb 	.word	0x080010bb
 8001028:	080010bb 	.word	0x080010bb
 800102c:	080010bb 	.word	0x080010bb
 8001030:	080010bb 	.word	0x080010bb
 8001034:	080010bb 	.word	0x080010bb
 8001038:	080010bb 	.word	0x080010bb
 800103c:	080010bb 	.word	0x080010bb
 8001040:	080010bb 	.word	0x080010bb
 8001044:	080010bb 	.word	0x080010bb
 8001048:	080010bb 	.word	0x080010bb
 800104c:	080010bb 	.word	0x080010bb
 8001050:	08001069 	.word	0x08001069
 8001054:	0800107d 	.word	0x0800107d
 8001058:	4a79      	ldr	r2, [pc, #484]	@ (8001240 <HAL_GPIO_Init+0x2b4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800105e:	e02c      	b.n	80010ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	623b      	str	r3, [r7, #32]
          break;
 8001066:	e029      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	3304      	adds	r3, #4
 800106e:	623b      	str	r3, [r7, #32]
          break;
 8001070:	e024      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	3308      	adds	r3, #8
 8001078:	623b      	str	r3, [r7, #32]
          break;
 800107a:	e01f      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	330c      	adds	r3, #12
 8001082:	623b      	str	r3, [r7, #32]
          break;
 8001084:	e01a      	b.n	80010bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800108e:	2304      	movs	r3, #4
 8001090:	623b      	str	r3, [r7, #32]
          break;
 8001092:	e013      	b.n	80010bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d105      	bne.n	80010a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800109c:	2308      	movs	r3, #8
 800109e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	611a      	str	r2, [r3, #16]
          break;
 80010a6:	e009      	b.n	80010bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a8:	2308      	movs	r3, #8
 80010aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	615a      	str	r2, [r3, #20]
          break;
 80010b2:	e003      	b.n	80010bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
          break;
 80010b8:	e000      	b.n	80010bc <HAL_GPIO_Init+0x130>
          break;
 80010ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2bff      	cmp	r3, #255	@ 0xff
 80010c0:	d801      	bhi.n	80010c6 <HAL_GPIO_Init+0x13a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	e001      	b.n	80010ca <HAL_GPIO_Init+0x13e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3304      	adds	r3, #4
 80010ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	2bff      	cmp	r3, #255	@ 0xff
 80010d0:	d802      	bhi.n	80010d8 <HAL_GPIO_Init+0x14c>
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0x152>
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	3b08      	subs	r3, #8
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	210f      	movs	r1, #15
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	6a39      	ldr	r1, [r7, #32]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	431a      	orrs	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 80b1 	beq.w	800126e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800110c:	4b4d      	ldr	r3, [pc, #308]	@ (8001244 <HAL_GPIO_Init+0x2b8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a4c      	ldr	r2, [pc, #304]	@ (8001244 <HAL_GPIO_Init+0x2b8>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b4a      	ldr	r3, [pc, #296]	@ (8001244 <HAL_GPIO_Init+0x2b8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001124:	4a48      	ldr	r2, [pc, #288]	@ (8001248 <HAL_GPIO_Init+0x2bc>)
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001130:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a40      	ldr	r2, [pc, #256]	@ (800124c <HAL_GPIO_Init+0x2c0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d013      	beq.n	8001178 <HAL_GPIO_Init+0x1ec>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3f      	ldr	r2, [pc, #252]	@ (8001250 <HAL_GPIO_Init+0x2c4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d00d      	beq.n	8001174 <HAL_GPIO_Init+0x1e8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a3e      	ldr	r2, [pc, #248]	@ (8001254 <HAL_GPIO_Init+0x2c8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d007      	beq.n	8001170 <HAL_GPIO_Init+0x1e4>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a3d      	ldr	r2, [pc, #244]	@ (8001258 <HAL_GPIO_Init+0x2cc>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d101      	bne.n	800116c <HAL_GPIO_Init+0x1e0>
 8001168:	2303      	movs	r3, #3
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 800116c:	2304      	movs	r3, #4
 800116e:	e004      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001170:	2302      	movs	r3, #2
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <HAL_GPIO_Init+0x1ee>
 8001178:	2300      	movs	r3, #0
 800117a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800117c:	f002 0203 	and.w	r2, r2, #3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4093      	lsls	r3, r2
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800118a:	492f      	ldr	r1, [pc, #188]	@ (8001248 <HAL_GPIO_Init+0x2bc>)
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a4:	4b2d      	ldr	r3, [pc, #180]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	492c      	ldr	r1, [pc, #176]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b2:	4b2a      	ldr	r3, [pc, #168]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4928      	ldr	r1, [pc, #160]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011cc:	4b23      	ldr	r3, [pc, #140]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	4922      	ldr	r1, [pc, #136]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60cb      	str	r3, [r1, #12]
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011da:	4b20      	ldr	r3, [pc, #128]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	491e      	ldr	r1, [pc, #120]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011f4:	4b19      	ldr	r3, [pc, #100]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4918      	ldr	r1, [pc, #96]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	43db      	mvns	r3, r3
 800120a:	4914      	ldr	r1, [pc, #80]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 800120c:	4013      	ands	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d021      	beq.n	8001260 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121c:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	490e      	ldr	r1, [pc, #56]	@ (800125c <HAL_GPIO_Init+0x2d0>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e021      	b.n	800126e <HAL_GPIO_Init+0x2e2>
 800122a:	bf00      	nop
 800122c:	10320000 	.word	0x10320000
 8001230:	10310000 	.word	0x10310000
 8001234:	10220000 	.word	0x10220000
 8001238:	10210000 	.word	0x10210000
 800123c:	10120000 	.word	0x10120000
 8001240:	10110000 	.word	0x10110000
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40011000 	.word	0x40011000
 8001258:	40011400 	.word	0x40011400
 800125c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_GPIO_Init+0x304>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	43db      	mvns	r3, r3
 8001268:	4909      	ldr	r1, [pc, #36]	@ (8001290 <HAL_GPIO_Init+0x304>)
 800126a:	4013      	ands	r3, r2
 800126c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001270:	3301      	adds	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	fa22 f303 	lsr.w	r3, r2, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	f47f ae8e 	bne.w	8000fa0 <HAL_GPIO_Init+0x14>
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	372c      	adds	r7, #44	@ 0x2c
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	40010400 	.word	0x40010400

08001294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e001      	b.n	80012b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	807b      	strh	r3, [r7, #2]
 80012ce:	4613      	mov	r3, r2
 80012d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d2:	787b      	ldrb	r3, [r7, #1]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d8:	887a      	ldrh	r2, [r7, #2]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012de:	e003      	b.n	80012e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	041a      	lsls	r2, r3, #16
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	611a      	str	r2, [r3, #16]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e272      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8087 	beq.w	8001422 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001314:	4b92      	ldr	r3, [pc, #584]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b04      	cmp	r3, #4
 800131e:	d00c      	beq.n	800133a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001320:	4b8f      	ldr	r3, [pc, #572]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b08      	cmp	r3, #8
 800132a:	d112      	bne.n	8001352 <HAL_RCC_OscConfig+0x5e>
 800132c:	4b8c      	ldr	r3, [pc, #560]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001338:	d10b      	bne.n	8001352 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133a:	4b89      	ldr	r3, [pc, #548]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d06c      	beq.n	8001420 <HAL_RCC_OscConfig+0x12c>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d168      	bne.n	8001420 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e24c      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x76>
 800135c:	4b80      	ldr	r3, [pc, #512]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a7f      	ldr	r2, [pc, #508]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e02e      	b.n	80013c8 <HAL_RCC_OscConfig+0xd4>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x98>
 8001372:	4b7b      	ldr	r3, [pc, #492]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7a      	ldr	r2, [pc, #488]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b78      	ldr	r3, [pc, #480]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a77      	ldr	r2, [pc, #476]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001384:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e01d      	b.n	80013c8 <HAL_RCC_OscConfig+0xd4>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0xbc>
 8001396:	4b72      	ldr	r3, [pc, #456]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a71      	ldr	r2, [pc, #452]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0xd4>
 80013b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b68      	ldr	r3, [pc, #416]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a67      	ldr	r2, [pc, #412]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fbee 	bl	8000bb0 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fbea 	bl	8000bb0 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	@ 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e200      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0xe4>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fbda 	bl	8000bb0 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fbd6 	bl	8000bb0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	@ 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1ec      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	4b53      	ldr	r3, [pc, #332]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x10c>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d063      	beq.n	80014f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800142e:	4b4c      	ldr	r3, [pc, #304]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800143a:	4b49      	ldr	r3, [pc, #292]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b08      	cmp	r3, #8
 8001444:	d11c      	bne.n	8001480 <HAL_RCC_OscConfig+0x18c>
 8001446:	4b46      	ldr	r3, [pc, #280]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d116      	bne.n	8001480 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	4b43      	ldr	r3, [pc, #268]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x176>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e1c0      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b3d      	ldr	r3, [pc, #244]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4939      	ldr	r1, [pc, #228]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	e03a      	b.n	80014f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d020      	beq.n	80014ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001488:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <HAL_RCC_OscConfig+0x270>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fb8f 	bl	8000bb0 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001496:	f7ff fb8b 	bl	8000bb0 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e1a1      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4927      	ldr	r1, [pc, #156]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
 80014c8:	e015      	b.n	80014f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ca:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <HAL_RCC_OscConfig+0x270>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb6e 	bl	8000bb0 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d8:	f7ff fb6a 	bl	8000bb0 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e180      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d03a      	beq.n	8001578 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d019      	beq.n	800153e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150a:	4b17      	ldr	r3, [pc, #92]	@ (8001568 <HAL_RCC_OscConfig+0x274>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7ff fb4e 	bl	8000bb0 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff fb4a 	bl	8000bb0 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e160      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	4b0d      	ldr	r3, [pc, #52]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001536:	2001      	movs	r0, #1
 8001538:	f000 face 	bl	8001ad8 <RCC_Delay>
 800153c:	e01c      	b.n	8001578 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153e:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <HAL_RCC_OscConfig+0x274>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001544:	f7ff fb34 	bl	8000bb0 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154a:	e00f      	b.n	800156c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800154c:	f7ff fb30 	bl	8000bb0 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d908      	bls.n	800156c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e146      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	42420000 	.word	0x42420000
 8001568:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156c:	4b92      	ldr	r3, [pc, #584]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800156e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1e9      	bne.n	800154c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80a6 	beq.w	80016d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158a:	4b8b      	ldr	r3, [pc, #556]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10d      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b88      	ldr	r3, [pc, #544]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a87      	ldr	r2, [pc, #540]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a0:	61d3      	str	r3, [r2, #28]
 80015a2:	4b85      	ldr	r3, [pc, #532]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ae:	2301      	movs	r3, #1
 80015b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	4b82      	ldr	r3, [pc, #520]	@ (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d118      	bne.n	80015f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015be:	4b7f      	ldr	r3, [pc, #508]	@ (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a7e      	ldr	r2, [pc, #504]	@ (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ca:	f7ff faf1 	bl	8000bb0 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d2:	f7ff faed 	bl	8000bb0 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b64      	cmp	r3, #100	@ 0x64
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e103      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	4b75      	ldr	r3, [pc, #468]	@ (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x312>
 80015f8:	4b6f      	ldr	r3, [pc, #444]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a6e      	ldr	r2, [pc, #440]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	e02d      	b.n	8001662 <HAL_RCC_OscConfig+0x36e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x334>
 800160e:	4b6a      	ldr	r3, [pc, #424]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4a69      	ldr	r2, [pc, #420]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	6213      	str	r3, [r2, #32]
 800161a:	4b67      	ldr	r3, [pc, #412]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4a66      	ldr	r2, [pc, #408]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	f023 0304 	bic.w	r3, r3, #4
 8001624:	6213      	str	r3, [r2, #32]
 8001626:	e01c      	b.n	8001662 <HAL_RCC_OscConfig+0x36e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b05      	cmp	r3, #5
 800162e:	d10c      	bne.n	800164a <HAL_RCC_OscConfig+0x356>
 8001630:	4b61      	ldr	r3, [pc, #388]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4a60      	ldr	r2, [pc, #384]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6213      	str	r3, [r2, #32]
 800163c:	4b5e      	ldr	r3, [pc, #376]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a5d      	ldr	r2, [pc, #372]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6213      	str	r3, [r2, #32]
 8001648:	e00b      	b.n	8001662 <HAL_RCC_OscConfig+0x36e>
 800164a:	4b5b      	ldr	r3, [pc, #364]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a5a      	ldr	r2, [pc, #360]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	4b58      	ldr	r3, [pc, #352]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4a57      	ldr	r2, [pc, #348]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	f023 0304 	bic.w	r3, r3, #4
 8001660:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d015      	beq.n	8001696 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff faa1 	bl	8000bb0 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff fa9d 	bl	8000bb0 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e0b1      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	4b4b      	ldr	r3, [pc, #300]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0ee      	beq.n	8001672 <HAL_RCC_OscConfig+0x37e>
 8001694:	e014      	b.n	80016c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fa8b 	bl	8000bb0 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff fa87 	bl	8000bb0 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e09b      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b4:	4b40      	ldr	r3, [pc, #256]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1ee      	bne.n	800169e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d105      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c6:	4b3c      	ldr	r3, [pc, #240]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a3b      	ldr	r2, [pc, #236]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8087 	beq.w	80017ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016dc:	4b36      	ldr	r3, [pc, #216]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d061      	beq.n	80017ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d146      	bne.n	800177e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f0:	4b33      	ldr	r3, [pc, #204]	@ (80017c0 <HAL_RCC_OscConfig+0x4cc>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f6:	f7ff fa5b 	bl	8000bb0 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fe:	f7ff fa57 	bl	8000bb0 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e06d      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001710:	4b29      	ldr	r3, [pc, #164]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001724:	d108      	bne.n	8001738 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001726:	4b24      	ldr	r3, [pc, #144]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	4921      	ldr	r1, [pc, #132]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001738:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a19      	ldr	r1, [r3, #32]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001748:	430b      	orrs	r3, r1
 800174a:	491b      	ldr	r1, [pc, #108]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001750:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <HAL_RCC_OscConfig+0x4cc>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fa2b 	bl	8000bb0 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175e:	f7ff fa27 	bl	8000bb0 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e03d      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x46a>
 800177c:	e035      	b.n	80017ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <HAL_RCC_OscConfig+0x4cc>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fa14 	bl	8000bb0 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff fa10 	bl	8000bb0 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e026      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x498>
 80017aa:	e01e      	b.n	80017ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e019      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40007000 	.word	0x40007000
 80017c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_RCC_OscConfig+0x500>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0d0      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b6a      	ldr	r3, [pc, #424]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d910      	bls.n	800183c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b67      	ldr	r3, [pc, #412]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 0207 	bic.w	r2, r3, #7
 8001822:	4965      	ldr	r1, [pc, #404]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b63      	ldr	r3, [pc, #396]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0b8      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001854:	4b59      	ldr	r3, [pc, #356]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a58      	ldr	r2, [pc, #352]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800185e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800186c:	4b53      	ldr	r3, [pc, #332]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4a52      	ldr	r2, [pc, #328]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001876:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001878:	4b50      	ldr	r3, [pc, #320]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	494d      	ldr	r1, [pc, #308]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d040      	beq.n	8001918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b47      	ldr	r3, [pc, #284]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d115      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e07f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	4b41      	ldr	r3, [pc, #260]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e073      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	4b3d      	ldr	r3, [pc, #244]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06b      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d6:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f023 0203 	bic.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4936      	ldr	r1, [pc, #216]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e8:	f7ff f962 	bl	8000bb0 <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7ff f95e 	bl	8000bb0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e053      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 020c 	and.w	r2, r3, #12
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	429a      	cmp	r2, r3
 8001916:	d1eb      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d210      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 0207 	bic.w	r2, r3, #7
 800192e:	4922      	ldr	r1, [pc, #136]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e032      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4916      	ldr	r1, [pc, #88]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001972:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	490e      	ldr	r1, [pc, #56]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001986:	f000 f821 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800198a:	4602      	mov	r2, r0
 800198c:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	490a      	ldr	r1, [pc, #40]	@ (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001998:	5ccb      	ldrb	r3, [r1, r3]
 800199a:	fa22 f303 	lsr.w	r3, r2, r3
 800199e:	4a09      	ldr	r2, [pc, #36]	@ (80019c4 <HAL_RCC_ClockConfig+0x1cc>)
 80019a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_RCC_ClockConfig+0x1d0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f8c0 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40022000 	.word	0x40022000
 80019bc:	40021000 	.word	0x40021000
 80019c0:	08003694 	.word	0x08003694
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x94>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d002      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x30>
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d003      	beq.n	8001a02 <HAL_RCC_GetSysClockFreq+0x36>
 80019fa:	e027      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019fc:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x98>)
 80019fe:	613b      	str	r3, [r7, #16]
      break;
 8001a00:	e027      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	0c9b      	lsrs	r3, r3, #18
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	4a17      	ldr	r2, [pc, #92]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a0c:	5cd3      	ldrb	r3, [r2, r3]
 8001a0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d010      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	0c5b      	lsrs	r3, r3, #17
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	4a11      	ldr	r2, [pc, #68]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a2e:	fb03 f202 	mul.w	r2, r3, r2
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e004      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	613b      	str	r3, [r7, #16]
      break;
 8001a4a:	e002      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a4e:	613b      	str	r3, [r7, #16]
      break;
 8001a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a52:	693b      	ldr	r3, [r7, #16]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	007a1200 	.word	0x007a1200
 8001a68:	080036ac 	.word	0x080036ac
 8001a6c:	080036bc 	.word	0x080036bc
 8001a70:	003d0900 	.word	0x003d0900

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b02      	ldr	r3, [pc, #8]	@ (8001a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a8c:	f7ff fff2 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	@ (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	080036a4 	.word	0x080036a4

08001ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab4:	f7ff ffde 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	0adb      	lsrs	r3, r3, #11
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	4903      	ldr	r1, [pc, #12]	@ (8001ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac6:	5ccb      	ldrb	r3, [r1, r3]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	080036a4 	.word	0x080036a4

08001ad8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <RCC_Delay+0x34>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <RCC_Delay+0x38>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	0a5b      	lsrs	r3, r3, #9
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001af4:	bf00      	nop
  }
  while (Delay --);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1e5a      	subs	r2, r3, #1
 8001afa:	60fa      	str	r2, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f9      	bne.n	8001af4 <RCC_Delay+0x1c>
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	10624dd3 	.word	0x10624dd3

08001b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e041      	b.n	8001baa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7fe fed6 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f000 f966 	bl	8001e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d001      	beq.n	8001bcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e032      	b.n	8001c32 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <HAL_TIM_Base_Start+0x88>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00e      	beq.n	8001bfc <HAL_TIM_Base_Start+0x48>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be6:	d009      	beq.n	8001bfc <HAL_TIM_Base_Start+0x48>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <HAL_TIM_Base_Start+0x8c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d004      	beq.n	8001bfc <HAL_TIM_Base_Start+0x48>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a13      	ldr	r2, [pc, #76]	@ (8001c44 <HAL_TIM_Base_Start+0x90>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d111      	bne.n	8001c20 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d010      	beq.n	8001c30 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1e:	e007      	b.n	8001c30 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40012c00 	.word	0x40012c00
 8001c40:	40000400 	.word	0x40000400
 8001c44:	40000800 	.word	0x40000800

08001c48 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6a1a      	ldr	r2, [r3, #32]
 8001c56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10f      	bne.n	8001c80 <HAL_TIM_Base_Stop+0x38>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6a1a      	ldr	r2, [r3, #32]
 8001c66:	f240 4344 	movw	r3, #1092	@ 0x444
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d107      	bne.n	8001c80 <HAL_TIM_Base_Stop+0x38>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_TIM_ConfigClockSource+0x1c>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e0b4      	b.n	8001e1a <HAL_TIM_ConfigClockSource+0x186>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ce8:	d03e      	beq.n	8001d68 <HAL_TIM_ConfigClockSource+0xd4>
 8001cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cee:	f200 8087 	bhi.w	8001e00 <HAL_TIM_ConfigClockSource+0x16c>
 8001cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cf6:	f000 8086 	beq.w	8001e06 <HAL_TIM_ConfigClockSource+0x172>
 8001cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cfe:	d87f      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x16c>
 8001d00:	2b70      	cmp	r3, #112	@ 0x70
 8001d02:	d01a      	beq.n	8001d3a <HAL_TIM_ConfigClockSource+0xa6>
 8001d04:	2b70      	cmp	r3, #112	@ 0x70
 8001d06:	d87b      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x16c>
 8001d08:	2b60      	cmp	r3, #96	@ 0x60
 8001d0a:	d050      	beq.n	8001dae <HAL_TIM_ConfigClockSource+0x11a>
 8001d0c:	2b60      	cmp	r3, #96	@ 0x60
 8001d0e:	d877      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x16c>
 8001d10:	2b50      	cmp	r3, #80	@ 0x50
 8001d12:	d03c      	beq.n	8001d8e <HAL_TIM_ConfigClockSource+0xfa>
 8001d14:	2b50      	cmp	r3, #80	@ 0x50
 8001d16:	d873      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x16c>
 8001d18:	2b40      	cmp	r3, #64	@ 0x40
 8001d1a:	d058      	beq.n	8001dce <HAL_TIM_ConfigClockSource+0x13a>
 8001d1c:	2b40      	cmp	r3, #64	@ 0x40
 8001d1e:	d86f      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x16c>
 8001d20:	2b30      	cmp	r3, #48	@ 0x30
 8001d22:	d064      	beq.n	8001dee <HAL_TIM_ConfigClockSource+0x15a>
 8001d24:	2b30      	cmp	r3, #48	@ 0x30
 8001d26:	d86b      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x16c>
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d060      	beq.n	8001dee <HAL_TIM_ConfigClockSource+0x15a>
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d867      	bhi.n	8001e00 <HAL_TIM_ConfigClockSource+0x16c>
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d05c      	beq.n	8001dee <HAL_TIM_ConfigClockSource+0x15a>
 8001d34:	2b10      	cmp	r3, #16
 8001d36:	d05a      	beq.n	8001dee <HAL_TIM_ConfigClockSource+0x15a>
 8001d38:	e062      	b.n	8001e00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d4a:	f000 f950 	bl	8001fee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	609a      	str	r2, [r3, #8]
      break;
 8001d66:	e04f      	b.n	8001e08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d78:	f000 f939 	bl	8001fee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d8a:	609a      	str	r2, [r3, #8]
      break;
 8001d8c:	e03c      	b.n	8001e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f000 f8b0 	bl	8001f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2150      	movs	r1, #80	@ 0x50
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f907 	bl	8001fba <TIM_ITRx_SetConfig>
      break;
 8001dac:	e02c      	b.n	8001e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f000 f8ce 	bl	8001f5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2160      	movs	r1, #96	@ 0x60
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 f8f7 	bl	8001fba <TIM_ITRx_SetConfig>
      break;
 8001dcc:	e01c      	b.n	8001e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f000 f890 	bl	8001f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2140      	movs	r1, #64	@ 0x40
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f8e7 	bl	8001fba <TIM_ITRx_SetConfig>
      break;
 8001dec:	e00c      	b.n	8001e08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4619      	mov	r1, r3
 8001df8:	4610      	mov	r0, r2
 8001dfa:	f000 f8de 	bl	8001fba <TIM_ITRx_SetConfig>
      break;
 8001dfe:	e003      	b.n	8001e08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
      break;
 8001e04:	e000      	b.n	8001e08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef4 <TIM_Base_SetConfig+0xd0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00b      	beq.n	8001e54 <TIM_Base_SetConfig+0x30>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e42:	d007      	beq.n	8001e54 <TIM_Base_SetConfig+0x30>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef8 <TIM_Base_SetConfig+0xd4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d003      	beq.n	8001e54 <TIM_Base_SetConfig+0x30>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a2b      	ldr	r2, [pc, #172]	@ (8001efc <TIM_Base_SetConfig+0xd8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d108      	bne.n	8001e66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a22      	ldr	r2, [pc, #136]	@ (8001ef4 <TIM_Base_SetConfig+0xd0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00b      	beq.n	8001e86 <TIM_Base_SetConfig+0x62>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e74:	d007      	beq.n	8001e86 <TIM_Base_SetConfig+0x62>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef8 <TIM_Base_SetConfig+0xd4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d003      	beq.n	8001e86 <TIM_Base_SetConfig+0x62>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a1e      	ldr	r2, [pc, #120]	@ (8001efc <TIM_Base_SetConfig+0xd8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d108      	bne.n	8001e98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <TIM_Base_SetConfig+0xd0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d103      	bne.n	8001ecc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f023 0201 	bic.w	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	611a      	str	r2, [r3, #16]
  }
}
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	40012c00 	.word	0x40012c00
 8001ef8:	40000400 	.word	0x40000400
 8001efc:	40000800 	.word	0x40000800

08001f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	f023 0201 	bic.w	r2, r3, #1
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f023 030a 	bic.w	r3, r3, #10
 8001f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	621a      	str	r2, [r3, #32]
}
 8001f52:	bf00      	nop
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	f023 0210 	bic.w	r2, r3, #16
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	031b      	lsls	r3, r3, #12
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001f98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	621a      	str	r2, [r3, #32]
}
 8001fb0:	bf00      	nop
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b085      	sub	sp, #20
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f043 0307 	orr.w	r3, r3, #7
 8001fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	609a      	str	r2, [r3, #8]
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b087      	sub	sp, #28
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002008:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	021a      	lsls	r2, r3, #8
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	431a      	orrs	r2, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	4313      	orrs	r3, r2
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	609a      	str	r2, [r3, #8]
}
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002040:	2302      	movs	r3, #2
 8002042:	e046      	b.n	80020d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800206a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a16      	ldr	r2, [pc, #88]	@ (80020dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00e      	beq.n	80020a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002090:	d009      	beq.n	80020a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d004      	beq.n	80020a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a10      	ldr	r2, [pc, #64]	@ (80020e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d10c      	bne.n	80020c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	40012c00 	.word	0x40012c00
 80020e0:	40000400 	.word	0x40000400
 80020e4:	40000800 	.word	0x40000800

080020e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e042      	b.n	8002180 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d106      	bne.n	8002114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe fc0a 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2224      	movs	r2, #36	@ 0x24
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800212a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fd63 	bl	8002bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695a      	ldr	r2, [r3, #20]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	@ 0x28
 800218c:	af02      	add	r7, sp, #8
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d175      	bne.n	8002294 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <HAL_UART_Transmit+0x2c>
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e06e      	b.n	8002296 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2221      	movs	r2, #33	@ 0x21
 80021c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021c6:	f7fe fcf3 	bl	8000bb0 <HAL_GetTick>
 80021ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021e0:	d108      	bne.n	80021f4 <HAL_UART_Transmit+0x6c>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d104      	bne.n	80021f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	e003      	b.n	80021fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021fc:	e02e      	b.n	800225c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2200      	movs	r2, #0
 8002206:	2180      	movs	r1, #128	@ 0x80
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fb01 	bl	8002810 <UART_WaitOnFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e03a      	b.n	8002296 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10b      	bne.n	800223e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002234:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	3302      	adds	r3, #2
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	e007      	b.n	800224e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	3301      	adds	r3, #1
 800224c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1cb      	bne.n	80021fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2200      	movs	r2, #0
 800226e:	2140      	movs	r1, #64	@ 0x40
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 facd 	bl	8002810 <UART_WaitOnFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e006      	b.n	8002296 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e000      	b.n	8002296 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3720      	adds	r7, #32
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b0ba      	sub	sp, #232	@ 0xe8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80022de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <HAL_UART_IRQHandler+0x66>
 80022f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022f6:	f003 0320 	and.w	r3, r3, #32
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fbbc 	bl	8002a7c <UART_Receive_IT>
      return;
 8002304:	e25b      	b.n	80027be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80de 	beq.w	80024cc <HAL_UART_IRQHandler+0x22c>
 8002310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d106      	bne.n	800232a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800231c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002320:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80d1 	beq.w	80024cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800232a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00b      	beq.n	800234e <HAL_UART_IRQHandler+0xae>
 8002336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800233a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	f043 0201 	orr.w	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800234e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <HAL_UART_IRQHandler+0xd2>
 800235a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	f043 0202 	orr.w	r2, r3, #2
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00b      	beq.n	8002396 <HAL_UART_IRQHandler+0xf6>
 800237e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238e:	f043 0204 	orr.w	r2, r3, #4
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d011      	beq.n	80023c6 <HAL_UART_IRQHandler+0x126>
 80023a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f043 0208 	orr.w	r2, r3, #8
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 81f2 	beq.w	80027b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_UART_IRQHandler+0x14e>
 80023dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 fb47 	bl	8002a7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf14      	ite	ne
 80023fc:	2301      	movne	r3, #1
 80023fe:	2300      	moveq	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b00      	cmp	r3, #0
 8002410:	d103      	bne.n	800241a <HAL_UART_IRQHandler+0x17a>
 8002412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d04f      	beq.n	80024ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fa51 	bl	80028c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800242a:	2b00      	cmp	r3, #0
 800242c:	d041      	beq.n	80024b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3314      	adds	r3, #20
 8002434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002438:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800243c:	e853 3f00 	ldrex	r3, [r3]
 8002440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800244c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	3314      	adds	r3, #20
 8002456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800245a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800245e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800246a:	e841 2300 	strex	r3, r2, [r1]
 800246e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1d9      	bne.n	800242e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247e:	2b00      	cmp	r3, #0
 8002480:	d013      	beq.n	80024aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002486:	4a7e      	ldr	r2, [pc, #504]	@ (8002680 <HAL_UART_IRQHandler+0x3e0>)
 8002488:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fd04 	bl	8000e9c <HAL_DMA_Abort_IT>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d016      	beq.n	80024c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800249e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024a4:	4610      	mov	r0, r2
 80024a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024a8:	e00e      	b.n	80024c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f99c 	bl	80027e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b0:	e00a      	b.n	80024c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f998 	bl	80027e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024b8:	e006      	b.n	80024c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f994 	bl	80027e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80024c6:	e175      	b.n	80027b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c8:	bf00      	nop
    return;
 80024ca:	e173      	b.n	80027b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	f040 814f 	bne.w	8002774 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8148 	beq.w	8002774 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80024e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8141 	beq.w	8002774 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 80b6 	beq.w	8002684 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002524:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8145 	beq.w	80027b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002536:	429a      	cmp	r2, r3
 8002538:	f080 813e 	bcs.w	80027b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002542:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b20      	cmp	r3, #32
 800254c:	f000 8088 	beq.w	8002660 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	330c      	adds	r3, #12
 8002556:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800255e:	e853 3f00 	ldrex	r3, [r3]
 8002562:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002566:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800256a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800256e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	330c      	adds	r3, #12
 8002578:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800257c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002580:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002584:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002588:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800258c:	e841 2300 	strex	r3, r2, [r1]
 8002590:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002594:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1d9      	bne.n	8002550 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3314      	adds	r3, #20
 80025a2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025a6:	e853 3f00 	ldrex	r3, [r3]
 80025aa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80025ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3314      	adds	r3, #20
 80025bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80025c0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80025c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80025c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80025cc:	e841 2300 	strex	r3, r2, [r1]
 80025d0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80025d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e1      	bne.n	800259c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3314      	adds	r3, #20
 80025de:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025e2:	e853 3f00 	ldrex	r3, [r3]
 80025e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80025e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3314      	adds	r3, #20
 80025f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80025fc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80025fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002600:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002602:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002604:	e841 2300 	strex	r3, r2, [r1]
 8002608:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800260a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e3      	bne.n	80025d8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002628:	e853 3f00 	ldrex	r3, [r3]
 800262c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800262e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002630:	f023 0310 	bic.w	r3, r3, #16
 8002634:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002642:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002644:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002646:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002648:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800264a:	e841 2300 	strex	r3, r2, [r1]
 800264e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002650:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e3      	bne.n	800261e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fbe3 	bl	8000e26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800266e:	b29b      	uxth	r3, r3
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	b29b      	uxth	r3, r3
 8002674:	4619      	mov	r1, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f8bf 	bl	80027fa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800267c:	e09c      	b.n	80027b8 <HAL_UART_IRQHandler+0x518>
 800267e:	bf00      	nop
 8002680:	08002987 	.word	0x08002987
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800268c:	b29b      	uxth	r3, r3
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	f000 808e 	beq.w	80027bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80026a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8089 	beq.w	80027bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	330c      	adds	r3, #12
 80026b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b4:	e853 3f00 	ldrex	r3, [r3]
 80026b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80026ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	330c      	adds	r3, #12
 80026ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80026ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80026d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80026d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026d6:	e841 2300 	strex	r3, r2, [r1]
 80026da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80026dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1e3      	bne.n	80026aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3314      	adds	r3, #20
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	e853 3f00 	ldrex	r3, [r3]
 80026f0:	623b      	str	r3, [r7, #32]
   return(result);
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3314      	adds	r3, #20
 8002702:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002706:	633a      	str	r2, [r7, #48]	@ 0x30
 8002708:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800270c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800270e:	e841 2300 	strex	r3, r2, [r1]
 8002712:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1e3      	bne.n	80026e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	330c      	adds	r3, #12
 800272e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	e853 3f00 	ldrex	r3, [r3]
 8002736:	60fb      	str	r3, [r7, #12]
   return(result);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0310 	bic.w	r3, r3, #16
 800273e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	330c      	adds	r3, #12
 8002748:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800274c:	61fa      	str	r2, [r7, #28]
 800274e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002750:	69b9      	ldr	r1, [r7, #24]
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	e841 2300 	strex	r3, r2, [r1]
 8002758:	617b      	str	r3, [r7, #20]
   return(result);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e3      	bne.n	8002728 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002766:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800276a:	4619      	mov	r1, r3
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f844 	bl	80027fa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002772:	e023      	b.n	80027bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800277c:	2b00      	cmp	r3, #0
 800277e:	d009      	beq.n	8002794 <HAL_UART_IRQHandler+0x4f4>
 8002780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f90e 	bl	80029ae <UART_Transmit_IT>
    return;
 8002792:	e014      	b.n	80027be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00e      	beq.n	80027be <HAL_UART_IRQHandler+0x51e>
 80027a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f94d 	bl	8002a4c <UART_EndTransmit_IT>
    return;
 80027b2:	e004      	b.n	80027be <HAL_UART_IRQHandler+0x51e>
    return;
 80027b4:	bf00      	nop
 80027b6:	e002      	b.n	80027be <HAL_UART_IRQHandler+0x51e>
      return;
 80027b8:	bf00      	nop
 80027ba:	e000      	b.n	80027be <HAL_UART_IRQHandler+0x51e>
      return;
 80027bc:	bf00      	nop
  }
}
 80027be:	37e8      	adds	r7, #232	@ 0xe8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002820:	e03b      	b.n	800289a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d037      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282a:	f7fe f9c1 	bl	8000bb0 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	6a3a      	ldr	r2, [r7, #32]
 8002836:	429a      	cmp	r2, r3
 8002838:	d302      	bcc.n	8002840 <UART_WaitOnFlagUntilTimeout+0x30>
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e03a      	b.n	80028ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d023      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b80      	cmp	r3, #128	@ 0x80
 8002856:	d020      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b40      	cmp	r3, #64	@ 0x40
 800285c:	d01d      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b08      	cmp	r3, #8
 800286a:	d116      	bne.n	800289a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f81d 	bl	80028c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2208      	movs	r2, #8
 800288c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e00f      	b.n	80028ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4013      	ands	r3, r2
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d0b4      	beq.n	8002822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b095      	sub	sp, #84	@ 0x54
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d4:	e853 3f00 	ldrex	r3, [r3]
 80028d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80028ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028f2:	e841 2300 	strex	r3, r2, [r1]
 80028f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1e5      	bne.n	80028ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3314      	adds	r3, #20
 8002904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	e853 3f00 	ldrex	r3, [r3]
 800290c:	61fb      	str	r3, [r7, #28]
   return(result);
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3314      	adds	r3, #20
 800291c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800291e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002920:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002922:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002926:	e841 2300 	strex	r3, r2, [r1]
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1e5      	bne.n	80028fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	2b01      	cmp	r3, #1
 8002938:	d119      	bne.n	800296e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	330c      	adds	r3, #12
 8002940:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	e853 3f00 	ldrex	r3, [r3]
 8002948:	60bb      	str	r3, [r7, #8]
   return(result);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f023 0310 	bic.w	r3, r3, #16
 8002950:	647b      	str	r3, [r7, #68]	@ 0x44
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	330c      	adds	r3, #12
 8002958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800295a:	61ba      	str	r2, [r7, #24]
 800295c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	6979      	ldr	r1, [r7, #20]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	e841 2300 	strex	r3, r2, [r1]
 8002966:	613b      	str	r3, [r7, #16]
   return(result);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e5      	bne.n	800293a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800297c:	bf00      	nop
 800297e:	3754      	adds	r7, #84	@ 0x54
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f7ff ff21 	bl	80027e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b21      	cmp	r3, #33	@ 0x21
 80029c0:	d13e      	bne.n	8002a40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ca:	d114      	bne.n	80029f6 <UART_Transmit_IT+0x48>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d110      	bne.n	80029f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	1c9a      	adds	r2, r3, #2
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	621a      	str	r2, [r3, #32]
 80029f4:	e008      	b.n	8002a08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	1c59      	adds	r1, r3, #1
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6211      	str	r1, [r2, #32]
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4619      	mov	r1, r3
 8002a16:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10f      	bne.n	8002a3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fea9 	bl	80027c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	@ 0x30
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b22      	cmp	r3, #34	@ 0x22
 8002a8e:	f040 80ae 	bne.w	8002bee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a9a:	d117      	bne.n	8002acc <UART_Receive_IT+0x50>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d113      	bne.n	8002acc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac4:	1c9a      	adds	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002aca:	e026      	b.n	8002b1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ade:	d007      	beq.n	8002af0 <UART_Receive_IT+0x74>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <UART_Receive_IT+0x82>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d106      	bne.n	8002afe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e008      	b.n	8002b10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4619      	mov	r1, r3
 8002b28:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d15d      	bne.n	8002bea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0220 	bic.w	r2, r2, #32
 8002b3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d135      	bne.n	8002be0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	330c      	adds	r3, #12
 8002b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	e853 3f00 	ldrex	r3, [r3]
 8002b88:	613b      	str	r3, [r7, #16]
   return(result);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f023 0310 	bic.w	r3, r3, #16
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	330c      	adds	r3, #12
 8002b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b9a:	623a      	str	r2, [r7, #32]
 8002b9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9e:	69f9      	ldr	r1, [r7, #28]
 8002ba0:	6a3a      	ldr	r2, [r7, #32]
 8002ba2:	e841 2300 	strex	r3, r2, [r1]
 8002ba6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1e5      	bne.n	8002b7a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d10a      	bne.n	8002bd2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff fe0e 	bl	80027fa <HAL_UARTEx_RxEventCallback>
 8002bde:	e002      	b.n	8002be6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fdf8 	bl	80027d6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e002      	b.n	8002bf0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e000      	b.n	8002bf0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3730      	adds	r7, #48	@ 0x30
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c32:	f023 030c 	bic.w	r3, r3, #12
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8002d0c <UART_SetConfig+0x114>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d103      	bne.n	8002c68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c60:	f7fe ff26 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	e002      	b.n	8002c6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c68:	f7fe ff0e 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002c6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009a      	lsls	r2, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	4a22      	ldr	r2, [pc, #136]	@ (8002d10 <UART_SetConfig+0x118>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	0119      	lsls	r1, r3, #4
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	009a      	lsls	r2, r3, #2
 8002c98:	441a      	add	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d10 <UART_SetConfig+0x118>)
 8002ca6:	fba3 0302 	umull	r0, r3, r3, r2
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2064      	movs	r0, #100	@ 0x64
 8002cae:	fb00 f303 	mul.w	r3, r0, r3
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	3332      	adds	r3, #50	@ 0x32
 8002cb8:	4a15      	ldr	r2, [pc, #84]	@ (8002d10 <UART_SetConfig+0x118>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cc4:	4419      	add	r1, r3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009a      	lsls	r2, r3, #2
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <UART_SetConfig+0x118>)
 8002cde:	fba3 0302 	umull	r0, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2064      	movs	r0, #100	@ 0x64
 8002ce6:	fb00 f303 	mul.w	r3, r0, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3332      	adds	r3, #50	@ 0x32
 8002cf0:	4a07      	ldr	r2, [pc, #28]	@ (8002d10 <UART_SetConfig+0x118>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	440a      	add	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d04:	bf00      	nop
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	51eb851f 	.word	0x51eb851f

08002d14 <siprintf>:
 8002d14:	b40e      	push	{r1, r2, r3}
 8002d16:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002d1a:	b500      	push	{lr}
 8002d1c:	b09c      	sub	sp, #112	@ 0x70
 8002d1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8002d20:	9002      	str	r0, [sp, #8]
 8002d22:	9006      	str	r0, [sp, #24]
 8002d24:	9107      	str	r1, [sp, #28]
 8002d26:	9104      	str	r1, [sp, #16]
 8002d28:	4808      	ldr	r0, [pc, #32]	@ (8002d4c <siprintf+0x38>)
 8002d2a:	4909      	ldr	r1, [pc, #36]	@ (8002d50 <siprintf+0x3c>)
 8002d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d30:	9105      	str	r1, [sp, #20]
 8002d32:	6800      	ldr	r0, [r0, #0]
 8002d34:	a902      	add	r1, sp, #8
 8002d36:	9301      	str	r3, [sp, #4]
 8002d38:	f000 f992 	bl	8003060 <_svfiprintf_r>
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	9b02      	ldr	r3, [sp, #8]
 8002d40:	701a      	strb	r2, [r3, #0]
 8002d42:	b01c      	add	sp, #112	@ 0x70
 8002d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d48:	b003      	add	sp, #12
 8002d4a:	4770      	bx	lr
 8002d4c:	2000000c 	.word	0x2000000c
 8002d50:	ffff0208 	.word	0xffff0208

08002d54 <memset>:
 8002d54:	4603      	mov	r3, r0
 8002d56:	4402      	add	r2, r0
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d100      	bne.n	8002d5e <memset+0xa>
 8002d5c:	4770      	bx	lr
 8002d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d62:	e7f9      	b.n	8002d58 <memset+0x4>

08002d64 <__errno>:
 8002d64:	4b01      	ldr	r3, [pc, #4]	@ (8002d6c <__errno+0x8>)
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	2000000c 	.word	0x2000000c

08002d70 <__libc_init_array>:
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	2600      	movs	r6, #0
 8002d74:	4d0c      	ldr	r5, [pc, #48]	@ (8002da8 <__libc_init_array+0x38>)
 8002d76:	4c0d      	ldr	r4, [pc, #52]	@ (8002dac <__libc_init_array+0x3c>)
 8002d78:	1b64      	subs	r4, r4, r5
 8002d7a:	10a4      	asrs	r4, r4, #2
 8002d7c:	42a6      	cmp	r6, r4
 8002d7e:	d109      	bne.n	8002d94 <__libc_init_array+0x24>
 8002d80:	f000 fc78 	bl	8003674 <_init>
 8002d84:	2600      	movs	r6, #0
 8002d86:	4d0a      	ldr	r5, [pc, #40]	@ (8002db0 <__libc_init_array+0x40>)
 8002d88:	4c0a      	ldr	r4, [pc, #40]	@ (8002db4 <__libc_init_array+0x44>)
 8002d8a:	1b64      	subs	r4, r4, r5
 8002d8c:	10a4      	asrs	r4, r4, #2
 8002d8e:	42a6      	cmp	r6, r4
 8002d90:	d105      	bne.n	8002d9e <__libc_init_array+0x2e>
 8002d92:	bd70      	pop	{r4, r5, r6, pc}
 8002d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d98:	4798      	blx	r3
 8002d9a:	3601      	adds	r6, #1
 8002d9c:	e7ee      	b.n	8002d7c <__libc_init_array+0xc>
 8002d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da2:	4798      	blx	r3
 8002da4:	3601      	adds	r6, #1
 8002da6:	e7f2      	b.n	8002d8e <__libc_init_array+0x1e>
 8002da8:	080036fc 	.word	0x080036fc
 8002dac:	080036fc 	.word	0x080036fc
 8002db0:	080036fc 	.word	0x080036fc
 8002db4:	08003700 	.word	0x08003700

08002db8 <__retarget_lock_acquire_recursive>:
 8002db8:	4770      	bx	lr

08002dba <__retarget_lock_release_recursive>:
 8002dba:	4770      	bx	lr

08002dbc <_free_r>:
 8002dbc:	b538      	push	{r3, r4, r5, lr}
 8002dbe:	4605      	mov	r5, r0
 8002dc0:	2900      	cmp	r1, #0
 8002dc2:	d040      	beq.n	8002e46 <_free_r+0x8a>
 8002dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dc8:	1f0c      	subs	r4, r1, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bfb8      	it	lt
 8002dce:	18e4      	addlt	r4, r4, r3
 8002dd0:	f000 f8de 	bl	8002f90 <__malloc_lock>
 8002dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e48 <_free_r+0x8c>)
 8002dd6:	6813      	ldr	r3, [r2, #0]
 8002dd8:	b933      	cbnz	r3, 8002de8 <_free_r+0x2c>
 8002dda:	6063      	str	r3, [r4, #4]
 8002ddc:	6014      	str	r4, [r2, #0]
 8002dde:	4628      	mov	r0, r5
 8002de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002de4:	f000 b8da 	b.w	8002f9c <__malloc_unlock>
 8002de8:	42a3      	cmp	r3, r4
 8002dea:	d908      	bls.n	8002dfe <_free_r+0x42>
 8002dec:	6820      	ldr	r0, [r4, #0]
 8002dee:	1821      	adds	r1, r4, r0
 8002df0:	428b      	cmp	r3, r1
 8002df2:	bf01      	itttt	eq
 8002df4:	6819      	ldreq	r1, [r3, #0]
 8002df6:	685b      	ldreq	r3, [r3, #4]
 8002df8:	1809      	addeq	r1, r1, r0
 8002dfa:	6021      	streq	r1, [r4, #0]
 8002dfc:	e7ed      	b.n	8002dda <_free_r+0x1e>
 8002dfe:	461a      	mov	r2, r3
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	b10b      	cbz	r3, 8002e08 <_free_r+0x4c>
 8002e04:	42a3      	cmp	r3, r4
 8002e06:	d9fa      	bls.n	8002dfe <_free_r+0x42>
 8002e08:	6811      	ldr	r1, [r2, #0]
 8002e0a:	1850      	adds	r0, r2, r1
 8002e0c:	42a0      	cmp	r0, r4
 8002e0e:	d10b      	bne.n	8002e28 <_free_r+0x6c>
 8002e10:	6820      	ldr	r0, [r4, #0]
 8002e12:	4401      	add	r1, r0
 8002e14:	1850      	adds	r0, r2, r1
 8002e16:	4283      	cmp	r3, r0
 8002e18:	6011      	str	r1, [r2, #0]
 8002e1a:	d1e0      	bne.n	8002dde <_free_r+0x22>
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4408      	add	r0, r1
 8002e22:	6010      	str	r0, [r2, #0]
 8002e24:	6053      	str	r3, [r2, #4]
 8002e26:	e7da      	b.n	8002dde <_free_r+0x22>
 8002e28:	d902      	bls.n	8002e30 <_free_r+0x74>
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	602b      	str	r3, [r5, #0]
 8002e2e:	e7d6      	b.n	8002dde <_free_r+0x22>
 8002e30:	6820      	ldr	r0, [r4, #0]
 8002e32:	1821      	adds	r1, r4, r0
 8002e34:	428b      	cmp	r3, r1
 8002e36:	bf01      	itttt	eq
 8002e38:	6819      	ldreq	r1, [r3, #0]
 8002e3a:	685b      	ldreq	r3, [r3, #4]
 8002e3c:	1809      	addeq	r1, r1, r0
 8002e3e:	6021      	streq	r1, [r4, #0]
 8002e40:	6063      	str	r3, [r4, #4]
 8002e42:	6054      	str	r4, [r2, #4]
 8002e44:	e7cb      	b.n	8002dde <_free_r+0x22>
 8002e46:	bd38      	pop	{r3, r4, r5, pc}
 8002e48:	2000027c 	.word	0x2000027c

08002e4c <sbrk_aligned>:
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	4e0f      	ldr	r6, [pc, #60]	@ (8002e8c <sbrk_aligned+0x40>)
 8002e50:	460c      	mov	r4, r1
 8002e52:	6831      	ldr	r1, [r6, #0]
 8002e54:	4605      	mov	r5, r0
 8002e56:	b911      	cbnz	r1, 8002e5e <sbrk_aligned+0x12>
 8002e58:	f000 fbaa 	bl	80035b0 <_sbrk_r>
 8002e5c:	6030      	str	r0, [r6, #0]
 8002e5e:	4621      	mov	r1, r4
 8002e60:	4628      	mov	r0, r5
 8002e62:	f000 fba5 	bl	80035b0 <_sbrk_r>
 8002e66:	1c43      	adds	r3, r0, #1
 8002e68:	d103      	bne.n	8002e72 <sbrk_aligned+0x26>
 8002e6a:	f04f 34ff 	mov.w	r4, #4294967295
 8002e6e:	4620      	mov	r0, r4
 8002e70:	bd70      	pop	{r4, r5, r6, pc}
 8002e72:	1cc4      	adds	r4, r0, #3
 8002e74:	f024 0403 	bic.w	r4, r4, #3
 8002e78:	42a0      	cmp	r0, r4
 8002e7a:	d0f8      	beq.n	8002e6e <sbrk_aligned+0x22>
 8002e7c:	1a21      	subs	r1, r4, r0
 8002e7e:	4628      	mov	r0, r5
 8002e80:	f000 fb96 	bl	80035b0 <_sbrk_r>
 8002e84:	3001      	adds	r0, #1
 8002e86:	d1f2      	bne.n	8002e6e <sbrk_aligned+0x22>
 8002e88:	e7ef      	b.n	8002e6a <sbrk_aligned+0x1e>
 8002e8a:	bf00      	nop
 8002e8c:	20000278 	.word	0x20000278

08002e90 <_malloc_r>:
 8002e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e94:	1ccd      	adds	r5, r1, #3
 8002e96:	f025 0503 	bic.w	r5, r5, #3
 8002e9a:	3508      	adds	r5, #8
 8002e9c:	2d0c      	cmp	r5, #12
 8002e9e:	bf38      	it	cc
 8002ea0:	250c      	movcc	r5, #12
 8002ea2:	2d00      	cmp	r5, #0
 8002ea4:	4606      	mov	r6, r0
 8002ea6:	db01      	blt.n	8002eac <_malloc_r+0x1c>
 8002ea8:	42a9      	cmp	r1, r5
 8002eaa:	d904      	bls.n	8002eb6 <_malloc_r+0x26>
 8002eac:	230c      	movs	r3, #12
 8002eae:	6033      	str	r3, [r6, #0]
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f8c <_malloc_r+0xfc>
 8002eba:	f000 f869 	bl	8002f90 <__malloc_lock>
 8002ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8002ec2:	461c      	mov	r4, r3
 8002ec4:	bb44      	cbnz	r4, 8002f18 <_malloc_r+0x88>
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	4630      	mov	r0, r6
 8002eca:	f7ff ffbf 	bl	8002e4c <sbrk_aligned>
 8002ece:	1c43      	adds	r3, r0, #1
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	d158      	bne.n	8002f86 <_malloc_r+0xf6>
 8002ed4:	f8d8 4000 	ldr.w	r4, [r8]
 8002ed8:	4627      	mov	r7, r4
 8002eda:	2f00      	cmp	r7, #0
 8002edc:	d143      	bne.n	8002f66 <_malloc_r+0xd6>
 8002ede:	2c00      	cmp	r4, #0
 8002ee0:	d04b      	beq.n	8002f7a <_malloc_r+0xea>
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	4639      	mov	r1, r7
 8002ee6:	4630      	mov	r0, r6
 8002ee8:	eb04 0903 	add.w	r9, r4, r3
 8002eec:	f000 fb60 	bl	80035b0 <_sbrk_r>
 8002ef0:	4581      	cmp	r9, r0
 8002ef2:	d142      	bne.n	8002f7a <_malloc_r+0xea>
 8002ef4:	6821      	ldr	r1, [r4, #0]
 8002ef6:	4630      	mov	r0, r6
 8002ef8:	1a6d      	subs	r5, r5, r1
 8002efa:	4629      	mov	r1, r5
 8002efc:	f7ff ffa6 	bl	8002e4c <sbrk_aligned>
 8002f00:	3001      	adds	r0, #1
 8002f02:	d03a      	beq.n	8002f7a <_malloc_r+0xea>
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	442b      	add	r3, r5
 8002f08:	6023      	str	r3, [r4, #0]
 8002f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	bb62      	cbnz	r2, 8002f6c <_malloc_r+0xdc>
 8002f12:	f8c8 7000 	str.w	r7, [r8]
 8002f16:	e00f      	b.n	8002f38 <_malloc_r+0xa8>
 8002f18:	6822      	ldr	r2, [r4, #0]
 8002f1a:	1b52      	subs	r2, r2, r5
 8002f1c:	d420      	bmi.n	8002f60 <_malloc_r+0xd0>
 8002f1e:	2a0b      	cmp	r2, #11
 8002f20:	d917      	bls.n	8002f52 <_malloc_r+0xc2>
 8002f22:	1961      	adds	r1, r4, r5
 8002f24:	42a3      	cmp	r3, r4
 8002f26:	6025      	str	r5, [r4, #0]
 8002f28:	bf18      	it	ne
 8002f2a:	6059      	strne	r1, [r3, #4]
 8002f2c:	6863      	ldr	r3, [r4, #4]
 8002f2e:	bf08      	it	eq
 8002f30:	f8c8 1000 	streq.w	r1, [r8]
 8002f34:	5162      	str	r2, [r4, r5]
 8002f36:	604b      	str	r3, [r1, #4]
 8002f38:	4630      	mov	r0, r6
 8002f3a:	f000 f82f 	bl	8002f9c <__malloc_unlock>
 8002f3e:	f104 000b 	add.w	r0, r4, #11
 8002f42:	1d23      	adds	r3, r4, #4
 8002f44:	f020 0007 	bic.w	r0, r0, #7
 8002f48:	1ac2      	subs	r2, r0, r3
 8002f4a:	bf1c      	itt	ne
 8002f4c:	1a1b      	subne	r3, r3, r0
 8002f4e:	50a3      	strne	r3, [r4, r2]
 8002f50:	e7af      	b.n	8002eb2 <_malloc_r+0x22>
 8002f52:	6862      	ldr	r2, [r4, #4]
 8002f54:	42a3      	cmp	r3, r4
 8002f56:	bf0c      	ite	eq
 8002f58:	f8c8 2000 	streq.w	r2, [r8]
 8002f5c:	605a      	strne	r2, [r3, #4]
 8002f5e:	e7eb      	b.n	8002f38 <_malloc_r+0xa8>
 8002f60:	4623      	mov	r3, r4
 8002f62:	6864      	ldr	r4, [r4, #4]
 8002f64:	e7ae      	b.n	8002ec4 <_malloc_r+0x34>
 8002f66:	463c      	mov	r4, r7
 8002f68:	687f      	ldr	r7, [r7, #4]
 8002f6a:	e7b6      	b.n	8002eda <_malloc_r+0x4a>
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	42a3      	cmp	r3, r4
 8002f72:	d1fb      	bne.n	8002f6c <_malloc_r+0xdc>
 8002f74:	2300      	movs	r3, #0
 8002f76:	6053      	str	r3, [r2, #4]
 8002f78:	e7de      	b.n	8002f38 <_malloc_r+0xa8>
 8002f7a:	230c      	movs	r3, #12
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	6033      	str	r3, [r6, #0]
 8002f80:	f000 f80c 	bl	8002f9c <__malloc_unlock>
 8002f84:	e794      	b.n	8002eb0 <_malloc_r+0x20>
 8002f86:	6005      	str	r5, [r0, #0]
 8002f88:	e7d6      	b.n	8002f38 <_malloc_r+0xa8>
 8002f8a:	bf00      	nop
 8002f8c:	2000027c 	.word	0x2000027c

08002f90 <__malloc_lock>:
 8002f90:	4801      	ldr	r0, [pc, #4]	@ (8002f98 <__malloc_lock+0x8>)
 8002f92:	f7ff bf11 	b.w	8002db8 <__retarget_lock_acquire_recursive>
 8002f96:	bf00      	nop
 8002f98:	20000274 	.word	0x20000274

08002f9c <__malloc_unlock>:
 8002f9c:	4801      	ldr	r0, [pc, #4]	@ (8002fa4 <__malloc_unlock+0x8>)
 8002f9e:	f7ff bf0c 	b.w	8002dba <__retarget_lock_release_recursive>
 8002fa2:	bf00      	nop
 8002fa4:	20000274 	.word	0x20000274

08002fa8 <__ssputs_r>:
 8002fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fac:	461f      	mov	r7, r3
 8002fae:	688e      	ldr	r6, [r1, #8]
 8002fb0:	4682      	mov	sl, r0
 8002fb2:	42be      	cmp	r6, r7
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	4690      	mov	r8, r2
 8002fb8:	680b      	ldr	r3, [r1, #0]
 8002fba:	d82d      	bhi.n	8003018 <__ssputs_r+0x70>
 8002fbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002fc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002fc4:	d026      	beq.n	8003014 <__ssputs_r+0x6c>
 8002fc6:	6965      	ldr	r5, [r4, #20]
 8002fc8:	6909      	ldr	r1, [r1, #16]
 8002fca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fce:	eba3 0901 	sub.w	r9, r3, r1
 8002fd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fd6:	1c7b      	adds	r3, r7, #1
 8002fd8:	444b      	add	r3, r9
 8002fda:	106d      	asrs	r5, r5, #1
 8002fdc:	429d      	cmp	r5, r3
 8002fde:	bf38      	it	cc
 8002fe0:	461d      	movcc	r5, r3
 8002fe2:	0553      	lsls	r3, r2, #21
 8002fe4:	d527      	bpl.n	8003036 <__ssputs_r+0x8e>
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	f7ff ff52 	bl	8002e90 <_malloc_r>
 8002fec:	4606      	mov	r6, r0
 8002fee:	b360      	cbz	r0, 800304a <__ssputs_r+0xa2>
 8002ff0:	464a      	mov	r2, r9
 8002ff2:	6921      	ldr	r1, [r4, #16]
 8002ff4:	f000 fafa 	bl	80035ec <memcpy>
 8002ff8:	89a3      	ldrh	r3, [r4, #12]
 8002ffa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003002:	81a3      	strh	r3, [r4, #12]
 8003004:	6126      	str	r6, [r4, #16]
 8003006:	444e      	add	r6, r9
 8003008:	6026      	str	r6, [r4, #0]
 800300a:	463e      	mov	r6, r7
 800300c:	6165      	str	r5, [r4, #20]
 800300e:	eba5 0509 	sub.w	r5, r5, r9
 8003012:	60a5      	str	r5, [r4, #8]
 8003014:	42be      	cmp	r6, r7
 8003016:	d900      	bls.n	800301a <__ssputs_r+0x72>
 8003018:	463e      	mov	r6, r7
 800301a:	4632      	mov	r2, r6
 800301c:	4641      	mov	r1, r8
 800301e:	6820      	ldr	r0, [r4, #0]
 8003020:	f000 faac 	bl	800357c <memmove>
 8003024:	2000      	movs	r0, #0
 8003026:	68a3      	ldr	r3, [r4, #8]
 8003028:	1b9b      	subs	r3, r3, r6
 800302a:	60a3      	str	r3, [r4, #8]
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	4433      	add	r3, r6
 8003030:	6023      	str	r3, [r4, #0]
 8003032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003036:	462a      	mov	r2, r5
 8003038:	f000 fae6 	bl	8003608 <_realloc_r>
 800303c:	4606      	mov	r6, r0
 800303e:	2800      	cmp	r0, #0
 8003040:	d1e0      	bne.n	8003004 <__ssputs_r+0x5c>
 8003042:	4650      	mov	r0, sl
 8003044:	6921      	ldr	r1, [r4, #16]
 8003046:	f7ff feb9 	bl	8002dbc <_free_r>
 800304a:	230c      	movs	r3, #12
 800304c:	f8ca 3000 	str.w	r3, [sl]
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	f04f 30ff 	mov.w	r0, #4294967295
 8003056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800305a:	81a3      	strh	r3, [r4, #12]
 800305c:	e7e9      	b.n	8003032 <__ssputs_r+0x8a>
	...

08003060 <_svfiprintf_r>:
 8003060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003064:	4698      	mov	r8, r3
 8003066:	898b      	ldrh	r3, [r1, #12]
 8003068:	4607      	mov	r7, r0
 800306a:	061b      	lsls	r3, r3, #24
 800306c:	460d      	mov	r5, r1
 800306e:	4614      	mov	r4, r2
 8003070:	b09d      	sub	sp, #116	@ 0x74
 8003072:	d510      	bpl.n	8003096 <_svfiprintf_r+0x36>
 8003074:	690b      	ldr	r3, [r1, #16]
 8003076:	b973      	cbnz	r3, 8003096 <_svfiprintf_r+0x36>
 8003078:	2140      	movs	r1, #64	@ 0x40
 800307a:	f7ff ff09 	bl	8002e90 <_malloc_r>
 800307e:	6028      	str	r0, [r5, #0]
 8003080:	6128      	str	r0, [r5, #16]
 8003082:	b930      	cbnz	r0, 8003092 <_svfiprintf_r+0x32>
 8003084:	230c      	movs	r3, #12
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	f04f 30ff 	mov.w	r0, #4294967295
 800308c:	b01d      	add	sp, #116	@ 0x74
 800308e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003092:	2340      	movs	r3, #64	@ 0x40
 8003094:	616b      	str	r3, [r5, #20]
 8003096:	2300      	movs	r3, #0
 8003098:	9309      	str	r3, [sp, #36]	@ 0x24
 800309a:	2320      	movs	r3, #32
 800309c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80030a0:	2330      	movs	r3, #48	@ 0x30
 80030a2:	f04f 0901 	mov.w	r9, #1
 80030a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80030aa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003244 <_svfiprintf_r+0x1e4>
 80030ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80030b2:	4623      	mov	r3, r4
 80030b4:	469a      	mov	sl, r3
 80030b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030ba:	b10a      	cbz	r2, 80030c0 <_svfiprintf_r+0x60>
 80030bc:	2a25      	cmp	r2, #37	@ 0x25
 80030be:	d1f9      	bne.n	80030b4 <_svfiprintf_r+0x54>
 80030c0:	ebba 0b04 	subs.w	fp, sl, r4
 80030c4:	d00b      	beq.n	80030de <_svfiprintf_r+0x7e>
 80030c6:	465b      	mov	r3, fp
 80030c8:	4622      	mov	r2, r4
 80030ca:	4629      	mov	r1, r5
 80030cc:	4638      	mov	r0, r7
 80030ce:	f7ff ff6b 	bl	8002fa8 <__ssputs_r>
 80030d2:	3001      	adds	r0, #1
 80030d4:	f000 80a7 	beq.w	8003226 <_svfiprintf_r+0x1c6>
 80030d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80030da:	445a      	add	r2, fp
 80030dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80030de:	f89a 3000 	ldrb.w	r3, [sl]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 809f 	beq.w	8003226 <_svfiprintf_r+0x1c6>
 80030e8:	2300      	movs	r3, #0
 80030ea:	f04f 32ff 	mov.w	r2, #4294967295
 80030ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030f2:	f10a 0a01 	add.w	sl, sl, #1
 80030f6:	9304      	str	r3, [sp, #16]
 80030f8:	9307      	str	r3, [sp, #28]
 80030fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80030fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8003100:	4654      	mov	r4, sl
 8003102:	2205      	movs	r2, #5
 8003104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003108:	484e      	ldr	r0, [pc, #312]	@ (8003244 <_svfiprintf_r+0x1e4>)
 800310a:	f000 fa61 	bl	80035d0 <memchr>
 800310e:	9a04      	ldr	r2, [sp, #16]
 8003110:	b9d8      	cbnz	r0, 800314a <_svfiprintf_r+0xea>
 8003112:	06d0      	lsls	r0, r2, #27
 8003114:	bf44      	itt	mi
 8003116:	2320      	movmi	r3, #32
 8003118:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800311c:	0711      	lsls	r1, r2, #28
 800311e:	bf44      	itt	mi
 8003120:	232b      	movmi	r3, #43	@ 0x2b
 8003122:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003126:	f89a 3000 	ldrb.w	r3, [sl]
 800312a:	2b2a      	cmp	r3, #42	@ 0x2a
 800312c:	d015      	beq.n	800315a <_svfiprintf_r+0xfa>
 800312e:	4654      	mov	r4, sl
 8003130:	2000      	movs	r0, #0
 8003132:	f04f 0c0a 	mov.w	ip, #10
 8003136:	9a07      	ldr	r2, [sp, #28]
 8003138:	4621      	mov	r1, r4
 800313a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800313e:	3b30      	subs	r3, #48	@ 0x30
 8003140:	2b09      	cmp	r3, #9
 8003142:	d94b      	bls.n	80031dc <_svfiprintf_r+0x17c>
 8003144:	b1b0      	cbz	r0, 8003174 <_svfiprintf_r+0x114>
 8003146:	9207      	str	r2, [sp, #28]
 8003148:	e014      	b.n	8003174 <_svfiprintf_r+0x114>
 800314a:	eba0 0308 	sub.w	r3, r0, r8
 800314e:	fa09 f303 	lsl.w	r3, r9, r3
 8003152:	4313      	orrs	r3, r2
 8003154:	46a2      	mov	sl, r4
 8003156:	9304      	str	r3, [sp, #16]
 8003158:	e7d2      	b.n	8003100 <_svfiprintf_r+0xa0>
 800315a:	9b03      	ldr	r3, [sp, #12]
 800315c:	1d19      	adds	r1, r3, #4
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	9103      	str	r1, [sp, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	bfbb      	ittet	lt
 8003166:	425b      	neglt	r3, r3
 8003168:	f042 0202 	orrlt.w	r2, r2, #2
 800316c:	9307      	strge	r3, [sp, #28]
 800316e:	9307      	strlt	r3, [sp, #28]
 8003170:	bfb8      	it	lt
 8003172:	9204      	strlt	r2, [sp, #16]
 8003174:	7823      	ldrb	r3, [r4, #0]
 8003176:	2b2e      	cmp	r3, #46	@ 0x2e
 8003178:	d10a      	bne.n	8003190 <_svfiprintf_r+0x130>
 800317a:	7863      	ldrb	r3, [r4, #1]
 800317c:	2b2a      	cmp	r3, #42	@ 0x2a
 800317e:	d132      	bne.n	80031e6 <_svfiprintf_r+0x186>
 8003180:	9b03      	ldr	r3, [sp, #12]
 8003182:	3402      	adds	r4, #2
 8003184:	1d1a      	adds	r2, r3, #4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	9203      	str	r2, [sp, #12]
 800318a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800318e:	9305      	str	r3, [sp, #20]
 8003190:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003248 <_svfiprintf_r+0x1e8>
 8003194:	2203      	movs	r2, #3
 8003196:	4650      	mov	r0, sl
 8003198:	7821      	ldrb	r1, [r4, #0]
 800319a:	f000 fa19 	bl	80035d0 <memchr>
 800319e:	b138      	cbz	r0, 80031b0 <_svfiprintf_r+0x150>
 80031a0:	2240      	movs	r2, #64	@ 0x40
 80031a2:	9b04      	ldr	r3, [sp, #16]
 80031a4:	eba0 000a 	sub.w	r0, r0, sl
 80031a8:	4082      	lsls	r2, r0
 80031aa:	4313      	orrs	r3, r2
 80031ac:	3401      	adds	r4, #1
 80031ae:	9304      	str	r3, [sp, #16]
 80031b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031b4:	2206      	movs	r2, #6
 80031b6:	4825      	ldr	r0, [pc, #148]	@ (800324c <_svfiprintf_r+0x1ec>)
 80031b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80031bc:	f000 fa08 	bl	80035d0 <memchr>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d036      	beq.n	8003232 <_svfiprintf_r+0x1d2>
 80031c4:	4b22      	ldr	r3, [pc, #136]	@ (8003250 <_svfiprintf_r+0x1f0>)
 80031c6:	bb1b      	cbnz	r3, 8003210 <_svfiprintf_r+0x1b0>
 80031c8:	9b03      	ldr	r3, [sp, #12]
 80031ca:	3307      	adds	r3, #7
 80031cc:	f023 0307 	bic.w	r3, r3, #7
 80031d0:	3308      	adds	r3, #8
 80031d2:	9303      	str	r3, [sp, #12]
 80031d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031d6:	4433      	add	r3, r6
 80031d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80031da:	e76a      	b.n	80030b2 <_svfiprintf_r+0x52>
 80031dc:	460c      	mov	r4, r1
 80031de:	2001      	movs	r0, #1
 80031e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80031e4:	e7a8      	b.n	8003138 <_svfiprintf_r+0xd8>
 80031e6:	2300      	movs	r3, #0
 80031e8:	f04f 0c0a 	mov.w	ip, #10
 80031ec:	4619      	mov	r1, r3
 80031ee:	3401      	adds	r4, #1
 80031f0:	9305      	str	r3, [sp, #20]
 80031f2:	4620      	mov	r0, r4
 80031f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031f8:	3a30      	subs	r2, #48	@ 0x30
 80031fa:	2a09      	cmp	r2, #9
 80031fc:	d903      	bls.n	8003206 <_svfiprintf_r+0x1a6>
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0c6      	beq.n	8003190 <_svfiprintf_r+0x130>
 8003202:	9105      	str	r1, [sp, #20]
 8003204:	e7c4      	b.n	8003190 <_svfiprintf_r+0x130>
 8003206:	4604      	mov	r4, r0
 8003208:	2301      	movs	r3, #1
 800320a:	fb0c 2101 	mla	r1, ip, r1, r2
 800320e:	e7f0      	b.n	80031f2 <_svfiprintf_r+0x192>
 8003210:	ab03      	add	r3, sp, #12
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	462a      	mov	r2, r5
 8003216:	4638      	mov	r0, r7
 8003218:	4b0e      	ldr	r3, [pc, #56]	@ (8003254 <_svfiprintf_r+0x1f4>)
 800321a:	a904      	add	r1, sp, #16
 800321c:	f3af 8000 	nop.w
 8003220:	1c42      	adds	r2, r0, #1
 8003222:	4606      	mov	r6, r0
 8003224:	d1d6      	bne.n	80031d4 <_svfiprintf_r+0x174>
 8003226:	89ab      	ldrh	r3, [r5, #12]
 8003228:	065b      	lsls	r3, r3, #25
 800322a:	f53f af2d 	bmi.w	8003088 <_svfiprintf_r+0x28>
 800322e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003230:	e72c      	b.n	800308c <_svfiprintf_r+0x2c>
 8003232:	ab03      	add	r3, sp, #12
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	462a      	mov	r2, r5
 8003238:	4638      	mov	r0, r7
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <_svfiprintf_r+0x1f4>)
 800323c:	a904      	add	r1, sp, #16
 800323e:	f000 f87d 	bl	800333c <_printf_i>
 8003242:	e7ed      	b.n	8003220 <_svfiprintf_r+0x1c0>
 8003244:	080036be 	.word	0x080036be
 8003248:	080036c4 	.word	0x080036c4
 800324c:	080036c8 	.word	0x080036c8
 8003250:	00000000 	.word	0x00000000
 8003254:	08002fa9 	.word	0x08002fa9

08003258 <_printf_common>:
 8003258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800325c:	4616      	mov	r6, r2
 800325e:	4698      	mov	r8, r3
 8003260:	688a      	ldr	r2, [r1, #8]
 8003262:	690b      	ldr	r3, [r1, #16]
 8003264:	4607      	mov	r7, r0
 8003266:	4293      	cmp	r3, r2
 8003268:	bfb8      	it	lt
 800326a:	4613      	movlt	r3, r2
 800326c:	6033      	str	r3, [r6, #0]
 800326e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003272:	460c      	mov	r4, r1
 8003274:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003278:	b10a      	cbz	r2, 800327e <_printf_common+0x26>
 800327a:	3301      	adds	r3, #1
 800327c:	6033      	str	r3, [r6, #0]
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	0699      	lsls	r1, r3, #26
 8003282:	bf42      	ittt	mi
 8003284:	6833      	ldrmi	r3, [r6, #0]
 8003286:	3302      	addmi	r3, #2
 8003288:	6033      	strmi	r3, [r6, #0]
 800328a:	6825      	ldr	r5, [r4, #0]
 800328c:	f015 0506 	ands.w	r5, r5, #6
 8003290:	d106      	bne.n	80032a0 <_printf_common+0x48>
 8003292:	f104 0a19 	add.w	sl, r4, #25
 8003296:	68e3      	ldr	r3, [r4, #12]
 8003298:	6832      	ldr	r2, [r6, #0]
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	42ab      	cmp	r3, r5
 800329e:	dc2b      	bgt.n	80032f8 <_printf_common+0xa0>
 80032a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80032a4:	6822      	ldr	r2, [r4, #0]
 80032a6:	3b00      	subs	r3, #0
 80032a8:	bf18      	it	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	0692      	lsls	r2, r2, #26
 80032ae:	d430      	bmi.n	8003312 <_printf_common+0xba>
 80032b0:	4641      	mov	r1, r8
 80032b2:	4638      	mov	r0, r7
 80032b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80032b8:	47c8      	blx	r9
 80032ba:	3001      	adds	r0, #1
 80032bc:	d023      	beq.n	8003306 <_printf_common+0xae>
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	6922      	ldr	r2, [r4, #16]
 80032c2:	f003 0306 	and.w	r3, r3, #6
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	bf14      	ite	ne
 80032ca:	2500      	movne	r5, #0
 80032cc:	6833      	ldreq	r3, [r6, #0]
 80032ce:	f04f 0600 	mov.w	r6, #0
 80032d2:	bf08      	it	eq
 80032d4:	68e5      	ldreq	r5, [r4, #12]
 80032d6:	f104 041a 	add.w	r4, r4, #26
 80032da:	bf08      	it	eq
 80032dc:	1aed      	subeq	r5, r5, r3
 80032de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80032e2:	bf08      	it	eq
 80032e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032e8:	4293      	cmp	r3, r2
 80032ea:	bfc4      	itt	gt
 80032ec:	1a9b      	subgt	r3, r3, r2
 80032ee:	18ed      	addgt	r5, r5, r3
 80032f0:	42b5      	cmp	r5, r6
 80032f2:	d11a      	bne.n	800332a <_printf_common+0xd2>
 80032f4:	2000      	movs	r0, #0
 80032f6:	e008      	b.n	800330a <_printf_common+0xb2>
 80032f8:	2301      	movs	r3, #1
 80032fa:	4652      	mov	r2, sl
 80032fc:	4641      	mov	r1, r8
 80032fe:	4638      	mov	r0, r7
 8003300:	47c8      	blx	r9
 8003302:	3001      	adds	r0, #1
 8003304:	d103      	bne.n	800330e <_printf_common+0xb6>
 8003306:	f04f 30ff 	mov.w	r0, #4294967295
 800330a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800330e:	3501      	adds	r5, #1
 8003310:	e7c1      	b.n	8003296 <_printf_common+0x3e>
 8003312:	2030      	movs	r0, #48	@ 0x30
 8003314:	18e1      	adds	r1, r4, r3
 8003316:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003320:	4422      	add	r2, r4
 8003322:	3302      	adds	r3, #2
 8003324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003328:	e7c2      	b.n	80032b0 <_printf_common+0x58>
 800332a:	2301      	movs	r3, #1
 800332c:	4622      	mov	r2, r4
 800332e:	4641      	mov	r1, r8
 8003330:	4638      	mov	r0, r7
 8003332:	47c8      	blx	r9
 8003334:	3001      	adds	r0, #1
 8003336:	d0e6      	beq.n	8003306 <_printf_common+0xae>
 8003338:	3601      	adds	r6, #1
 800333a:	e7d9      	b.n	80032f0 <_printf_common+0x98>

0800333c <_printf_i>:
 800333c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003340:	7e0f      	ldrb	r7, [r1, #24]
 8003342:	4691      	mov	r9, r2
 8003344:	2f78      	cmp	r7, #120	@ 0x78
 8003346:	4680      	mov	r8, r0
 8003348:	460c      	mov	r4, r1
 800334a:	469a      	mov	sl, r3
 800334c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800334e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003352:	d807      	bhi.n	8003364 <_printf_i+0x28>
 8003354:	2f62      	cmp	r7, #98	@ 0x62
 8003356:	d80a      	bhi.n	800336e <_printf_i+0x32>
 8003358:	2f00      	cmp	r7, #0
 800335a:	f000 80d3 	beq.w	8003504 <_printf_i+0x1c8>
 800335e:	2f58      	cmp	r7, #88	@ 0x58
 8003360:	f000 80ba 	beq.w	80034d8 <_printf_i+0x19c>
 8003364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003368:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800336c:	e03a      	b.n	80033e4 <_printf_i+0xa8>
 800336e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003372:	2b15      	cmp	r3, #21
 8003374:	d8f6      	bhi.n	8003364 <_printf_i+0x28>
 8003376:	a101      	add	r1, pc, #4	@ (adr r1, 800337c <_printf_i+0x40>)
 8003378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800337c:	080033d5 	.word	0x080033d5
 8003380:	080033e9 	.word	0x080033e9
 8003384:	08003365 	.word	0x08003365
 8003388:	08003365 	.word	0x08003365
 800338c:	08003365 	.word	0x08003365
 8003390:	08003365 	.word	0x08003365
 8003394:	080033e9 	.word	0x080033e9
 8003398:	08003365 	.word	0x08003365
 800339c:	08003365 	.word	0x08003365
 80033a0:	08003365 	.word	0x08003365
 80033a4:	08003365 	.word	0x08003365
 80033a8:	080034eb 	.word	0x080034eb
 80033ac:	08003413 	.word	0x08003413
 80033b0:	080034a5 	.word	0x080034a5
 80033b4:	08003365 	.word	0x08003365
 80033b8:	08003365 	.word	0x08003365
 80033bc:	0800350d 	.word	0x0800350d
 80033c0:	08003365 	.word	0x08003365
 80033c4:	08003413 	.word	0x08003413
 80033c8:	08003365 	.word	0x08003365
 80033cc:	08003365 	.word	0x08003365
 80033d0:	080034ad 	.word	0x080034ad
 80033d4:	6833      	ldr	r3, [r6, #0]
 80033d6:	1d1a      	adds	r2, r3, #4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6032      	str	r2, [r6, #0]
 80033dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80033e4:	2301      	movs	r3, #1
 80033e6:	e09e      	b.n	8003526 <_printf_i+0x1ea>
 80033e8:	6833      	ldr	r3, [r6, #0]
 80033ea:	6820      	ldr	r0, [r4, #0]
 80033ec:	1d19      	adds	r1, r3, #4
 80033ee:	6031      	str	r1, [r6, #0]
 80033f0:	0606      	lsls	r6, r0, #24
 80033f2:	d501      	bpl.n	80033f8 <_printf_i+0xbc>
 80033f4:	681d      	ldr	r5, [r3, #0]
 80033f6:	e003      	b.n	8003400 <_printf_i+0xc4>
 80033f8:	0645      	lsls	r5, r0, #25
 80033fa:	d5fb      	bpl.n	80033f4 <_printf_i+0xb8>
 80033fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003400:	2d00      	cmp	r5, #0
 8003402:	da03      	bge.n	800340c <_printf_i+0xd0>
 8003404:	232d      	movs	r3, #45	@ 0x2d
 8003406:	426d      	negs	r5, r5
 8003408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800340c:	230a      	movs	r3, #10
 800340e:	4859      	ldr	r0, [pc, #356]	@ (8003574 <_printf_i+0x238>)
 8003410:	e011      	b.n	8003436 <_printf_i+0xfa>
 8003412:	6821      	ldr	r1, [r4, #0]
 8003414:	6833      	ldr	r3, [r6, #0]
 8003416:	0608      	lsls	r0, r1, #24
 8003418:	f853 5b04 	ldr.w	r5, [r3], #4
 800341c:	d402      	bmi.n	8003424 <_printf_i+0xe8>
 800341e:	0649      	lsls	r1, r1, #25
 8003420:	bf48      	it	mi
 8003422:	b2ad      	uxthmi	r5, r5
 8003424:	2f6f      	cmp	r7, #111	@ 0x6f
 8003426:	6033      	str	r3, [r6, #0]
 8003428:	bf14      	ite	ne
 800342a:	230a      	movne	r3, #10
 800342c:	2308      	moveq	r3, #8
 800342e:	4851      	ldr	r0, [pc, #324]	@ (8003574 <_printf_i+0x238>)
 8003430:	2100      	movs	r1, #0
 8003432:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003436:	6866      	ldr	r6, [r4, #4]
 8003438:	2e00      	cmp	r6, #0
 800343a:	bfa8      	it	ge
 800343c:	6821      	ldrge	r1, [r4, #0]
 800343e:	60a6      	str	r6, [r4, #8]
 8003440:	bfa4      	itt	ge
 8003442:	f021 0104 	bicge.w	r1, r1, #4
 8003446:	6021      	strge	r1, [r4, #0]
 8003448:	b90d      	cbnz	r5, 800344e <_printf_i+0x112>
 800344a:	2e00      	cmp	r6, #0
 800344c:	d04b      	beq.n	80034e6 <_printf_i+0x1aa>
 800344e:	4616      	mov	r6, r2
 8003450:	fbb5 f1f3 	udiv	r1, r5, r3
 8003454:	fb03 5711 	mls	r7, r3, r1, r5
 8003458:	5dc7      	ldrb	r7, [r0, r7]
 800345a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800345e:	462f      	mov	r7, r5
 8003460:	42bb      	cmp	r3, r7
 8003462:	460d      	mov	r5, r1
 8003464:	d9f4      	bls.n	8003450 <_printf_i+0x114>
 8003466:	2b08      	cmp	r3, #8
 8003468:	d10b      	bne.n	8003482 <_printf_i+0x146>
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	07df      	lsls	r7, r3, #31
 800346e:	d508      	bpl.n	8003482 <_printf_i+0x146>
 8003470:	6923      	ldr	r3, [r4, #16]
 8003472:	6861      	ldr	r1, [r4, #4]
 8003474:	4299      	cmp	r1, r3
 8003476:	bfde      	ittt	le
 8003478:	2330      	movle	r3, #48	@ 0x30
 800347a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800347e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003482:	1b92      	subs	r2, r2, r6
 8003484:	6122      	str	r2, [r4, #16]
 8003486:	464b      	mov	r3, r9
 8003488:	4621      	mov	r1, r4
 800348a:	4640      	mov	r0, r8
 800348c:	f8cd a000 	str.w	sl, [sp]
 8003490:	aa03      	add	r2, sp, #12
 8003492:	f7ff fee1 	bl	8003258 <_printf_common>
 8003496:	3001      	adds	r0, #1
 8003498:	d14a      	bne.n	8003530 <_printf_i+0x1f4>
 800349a:	f04f 30ff 	mov.w	r0, #4294967295
 800349e:	b004      	add	sp, #16
 80034a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	f043 0320 	orr.w	r3, r3, #32
 80034aa:	6023      	str	r3, [r4, #0]
 80034ac:	2778      	movs	r7, #120	@ 0x78
 80034ae:	4832      	ldr	r0, [pc, #200]	@ (8003578 <_printf_i+0x23c>)
 80034b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	6831      	ldr	r1, [r6, #0]
 80034b8:	061f      	lsls	r7, r3, #24
 80034ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80034be:	d402      	bmi.n	80034c6 <_printf_i+0x18a>
 80034c0:	065f      	lsls	r7, r3, #25
 80034c2:	bf48      	it	mi
 80034c4:	b2ad      	uxthmi	r5, r5
 80034c6:	6031      	str	r1, [r6, #0]
 80034c8:	07d9      	lsls	r1, r3, #31
 80034ca:	bf44      	itt	mi
 80034cc:	f043 0320 	orrmi.w	r3, r3, #32
 80034d0:	6023      	strmi	r3, [r4, #0]
 80034d2:	b11d      	cbz	r5, 80034dc <_printf_i+0x1a0>
 80034d4:	2310      	movs	r3, #16
 80034d6:	e7ab      	b.n	8003430 <_printf_i+0xf4>
 80034d8:	4826      	ldr	r0, [pc, #152]	@ (8003574 <_printf_i+0x238>)
 80034da:	e7e9      	b.n	80034b0 <_printf_i+0x174>
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	f023 0320 	bic.w	r3, r3, #32
 80034e2:	6023      	str	r3, [r4, #0]
 80034e4:	e7f6      	b.n	80034d4 <_printf_i+0x198>
 80034e6:	4616      	mov	r6, r2
 80034e8:	e7bd      	b.n	8003466 <_printf_i+0x12a>
 80034ea:	6833      	ldr	r3, [r6, #0]
 80034ec:	6825      	ldr	r5, [r4, #0]
 80034ee:	1d18      	adds	r0, r3, #4
 80034f0:	6961      	ldr	r1, [r4, #20]
 80034f2:	6030      	str	r0, [r6, #0]
 80034f4:	062e      	lsls	r6, r5, #24
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	d501      	bpl.n	80034fe <_printf_i+0x1c2>
 80034fa:	6019      	str	r1, [r3, #0]
 80034fc:	e002      	b.n	8003504 <_printf_i+0x1c8>
 80034fe:	0668      	lsls	r0, r5, #25
 8003500:	d5fb      	bpl.n	80034fa <_printf_i+0x1be>
 8003502:	8019      	strh	r1, [r3, #0]
 8003504:	2300      	movs	r3, #0
 8003506:	4616      	mov	r6, r2
 8003508:	6123      	str	r3, [r4, #16]
 800350a:	e7bc      	b.n	8003486 <_printf_i+0x14a>
 800350c:	6833      	ldr	r3, [r6, #0]
 800350e:	2100      	movs	r1, #0
 8003510:	1d1a      	adds	r2, r3, #4
 8003512:	6032      	str	r2, [r6, #0]
 8003514:	681e      	ldr	r6, [r3, #0]
 8003516:	6862      	ldr	r2, [r4, #4]
 8003518:	4630      	mov	r0, r6
 800351a:	f000 f859 	bl	80035d0 <memchr>
 800351e:	b108      	cbz	r0, 8003524 <_printf_i+0x1e8>
 8003520:	1b80      	subs	r0, r0, r6
 8003522:	6060      	str	r0, [r4, #4]
 8003524:	6863      	ldr	r3, [r4, #4]
 8003526:	6123      	str	r3, [r4, #16]
 8003528:	2300      	movs	r3, #0
 800352a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800352e:	e7aa      	b.n	8003486 <_printf_i+0x14a>
 8003530:	4632      	mov	r2, r6
 8003532:	4649      	mov	r1, r9
 8003534:	4640      	mov	r0, r8
 8003536:	6923      	ldr	r3, [r4, #16]
 8003538:	47d0      	blx	sl
 800353a:	3001      	adds	r0, #1
 800353c:	d0ad      	beq.n	800349a <_printf_i+0x15e>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	079b      	lsls	r3, r3, #30
 8003542:	d413      	bmi.n	800356c <_printf_i+0x230>
 8003544:	68e0      	ldr	r0, [r4, #12]
 8003546:	9b03      	ldr	r3, [sp, #12]
 8003548:	4298      	cmp	r0, r3
 800354a:	bfb8      	it	lt
 800354c:	4618      	movlt	r0, r3
 800354e:	e7a6      	b.n	800349e <_printf_i+0x162>
 8003550:	2301      	movs	r3, #1
 8003552:	4632      	mov	r2, r6
 8003554:	4649      	mov	r1, r9
 8003556:	4640      	mov	r0, r8
 8003558:	47d0      	blx	sl
 800355a:	3001      	adds	r0, #1
 800355c:	d09d      	beq.n	800349a <_printf_i+0x15e>
 800355e:	3501      	adds	r5, #1
 8003560:	68e3      	ldr	r3, [r4, #12]
 8003562:	9903      	ldr	r1, [sp, #12]
 8003564:	1a5b      	subs	r3, r3, r1
 8003566:	42ab      	cmp	r3, r5
 8003568:	dcf2      	bgt.n	8003550 <_printf_i+0x214>
 800356a:	e7eb      	b.n	8003544 <_printf_i+0x208>
 800356c:	2500      	movs	r5, #0
 800356e:	f104 0619 	add.w	r6, r4, #25
 8003572:	e7f5      	b.n	8003560 <_printf_i+0x224>
 8003574:	080036cf 	.word	0x080036cf
 8003578:	080036e0 	.word	0x080036e0

0800357c <memmove>:
 800357c:	4288      	cmp	r0, r1
 800357e:	b510      	push	{r4, lr}
 8003580:	eb01 0402 	add.w	r4, r1, r2
 8003584:	d902      	bls.n	800358c <memmove+0x10>
 8003586:	4284      	cmp	r4, r0
 8003588:	4623      	mov	r3, r4
 800358a:	d807      	bhi.n	800359c <memmove+0x20>
 800358c:	1e43      	subs	r3, r0, #1
 800358e:	42a1      	cmp	r1, r4
 8003590:	d008      	beq.n	80035a4 <memmove+0x28>
 8003592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003596:	f803 2f01 	strb.w	r2, [r3, #1]!
 800359a:	e7f8      	b.n	800358e <memmove+0x12>
 800359c:	4601      	mov	r1, r0
 800359e:	4402      	add	r2, r0
 80035a0:	428a      	cmp	r2, r1
 80035a2:	d100      	bne.n	80035a6 <memmove+0x2a>
 80035a4:	bd10      	pop	{r4, pc}
 80035a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035ae:	e7f7      	b.n	80035a0 <memmove+0x24>

080035b0 <_sbrk_r>:
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	2300      	movs	r3, #0
 80035b4:	4d05      	ldr	r5, [pc, #20]	@ (80035cc <_sbrk_r+0x1c>)
 80035b6:	4604      	mov	r4, r0
 80035b8:	4608      	mov	r0, r1
 80035ba:	602b      	str	r3, [r5, #0]
 80035bc:	f7fd fa3e 	bl	8000a3c <_sbrk>
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	d102      	bne.n	80035ca <_sbrk_r+0x1a>
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	b103      	cbz	r3, 80035ca <_sbrk_r+0x1a>
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
 80035cc:	20000270 	.word	0x20000270

080035d0 <memchr>:
 80035d0:	4603      	mov	r3, r0
 80035d2:	b510      	push	{r4, lr}
 80035d4:	b2c9      	uxtb	r1, r1
 80035d6:	4402      	add	r2, r0
 80035d8:	4293      	cmp	r3, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	d101      	bne.n	80035e2 <memchr+0x12>
 80035de:	2000      	movs	r0, #0
 80035e0:	e003      	b.n	80035ea <memchr+0x1a>
 80035e2:	7804      	ldrb	r4, [r0, #0]
 80035e4:	3301      	adds	r3, #1
 80035e6:	428c      	cmp	r4, r1
 80035e8:	d1f6      	bne.n	80035d8 <memchr+0x8>
 80035ea:	bd10      	pop	{r4, pc}

080035ec <memcpy>:
 80035ec:	440a      	add	r2, r1
 80035ee:	4291      	cmp	r1, r2
 80035f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80035f4:	d100      	bne.n	80035f8 <memcpy+0xc>
 80035f6:	4770      	bx	lr
 80035f8:	b510      	push	{r4, lr}
 80035fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035fe:	4291      	cmp	r1, r2
 8003600:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003604:	d1f9      	bne.n	80035fa <memcpy+0xe>
 8003606:	bd10      	pop	{r4, pc}

08003608 <_realloc_r>:
 8003608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800360c:	4680      	mov	r8, r0
 800360e:	4615      	mov	r5, r2
 8003610:	460c      	mov	r4, r1
 8003612:	b921      	cbnz	r1, 800361e <_realloc_r+0x16>
 8003614:	4611      	mov	r1, r2
 8003616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800361a:	f7ff bc39 	b.w	8002e90 <_malloc_r>
 800361e:	b92a      	cbnz	r2, 800362c <_realloc_r+0x24>
 8003620:	f7ff fbcc 	bl	8002dbc <_free_r>
 8003624:	2400      	movs	r4, #0
 8003626:	4620      	mov	r0, r4
 8003628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800362c:	f000 f81a 	bl	8003664 <_malloc_usable_size_r>
 8003630:	4285      	cmp	r5, r0
 8003632:	4606      	mov	r6, r0
 8003634:	d802      	bhi.n	800363c <_realloc_r+0x34>
 8003636:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800363a:	d8f4      	bhi.n	8003626 <_realloc_r+0x1e>
 800363c:	4629      	mov	r1, r5
 800363e:	4640      	mov	r0, r8
 8003640:	f7ff fc26 	bl	8002e90 <_malloc_r>
 8003644:	4607      	mov	r7, r0
 8003646:	2800      	cmp	r0, #0
 8003648:	d0ec      	beq.n	8003624 <_realloc_r+0x1c>
 800364a:	42b5      	cmp	r5, r6
 800364c:	462a      	mov	r2, r5
 800364e:	4621      	mov	r1, r4
 8003650:	bf28      	it	cs
 8003652:	4632      	movcs	r2, r6
 8003654:	f7ff ffca 	bl	80035ec <memcpy>
 8003658:	4621      	mov	r1, r4
 800365a:	4640      	mov	r0, r8
 800365c:	f7ff fbae 	bl	8002dbc <_free_r>
 8003660:	463c      	mov	r4, r7
 8003662:	e7e0      	b.n	8003626 <_realloc_r+0x1e>

08003664 <_malloc_usable_size_r>:
 8003664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003668:	1f18      	subs	r0, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	bfbc      	itt	lt
 800366e:	580b      	ldrlt	r3, [r1, r0]
 8003670:	18c0      	addlt	r0, r0, r3
 8003672:	4770      	bx	lr

08003674 <_init>:
 8003674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003676:	bf00      	nop
 8003678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367a:	bc08      	pop	{r3}
 800367c:	469e      	mov	lr, r3
 800367e:	4770      	bx	lr

08003680 <_fini>:
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003682:	bf00      	nop
 8003684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003686:	bc08      	pop	{r3}
 8003688:	469e      	mov	lr, r3
 800368a:	4770      	bx	lr
